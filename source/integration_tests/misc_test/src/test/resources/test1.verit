verit dev - the VERI(T) theorem prover (UFRN/LORIA).
success
success
success
success
success
success
success
success
success
success
success
success
success
success
success
success
success
success
success
success
success
success
success
success
success
success
success
success
unsat
success
(set .c1 (input :conclusion ((and (or (and (= y0 x0) (= y0 x1)) (and (= z0 x0) (= z0 x1))) (or (and (= y1 x1) (= y1 x2)) (and (= z1 x1) (= z1 x2))) (or (and (= x2 y2) (= x3 y2)) (and (= z2 x2) (= z2 x3))) (or (and (= y3 x3) (= x4 y3)) (and (= z3 x3) (= z3 x4))) (or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))) (or (and (= x5 y5) (= x6 y5)) (and (= z5 x5) (= z5 x6))) (not (= x6 x0))))))
(set .c2 (and :clauses (.c1) :conclusion ((or (and (= y0 x0) (= y0 x1)) (and (= z0 x0) (= z0 x1))))))
(set .c3 (and_pos :conclusion ((not (and (= y0 x0) (= y0 x1))) (= y0 x0))))
(set .c4 (and_pos :conclusion ((not (and (= y0 x0) (= y0 x1))) (= y0 x1))))
(set .c5 (and_pos :conclusion ((not (and (= z0 x0) (= z0 x1))) (= z0 x0))))
(set .c6 (and_pos :conclusion ((not (and (= z0 x0) (= z0 x1))) (= z0 x1))))
(set .c7 (or :clauses (.c2) :conclusion ((and (= y0 x0) (= y0 x1)) (and (= z0 x0) (= z0 x1)))))
(set .c8 (and :clauses (.c1) :conclusion ((or (and (= y1 x1) (= y1 x2)) (and (= z1 x1) (= z1 x2))))))
(set .c9 (and_pos :conclusion ((not (and (= y1 x1) (= y1 x2))) (= y1 x1))))
(set .c10 (and_pos :conclusion ((not (and (= y1 x1) (= y1 x2))) (= y1 x2))))
(set .c11 (and_pos :conclusion ((not (and (= z1 x1) (= z1 x2))) (= z1 x1))))
(set .c12 (and_pos :conclusion ((not (and (= z1 x1) (= z1 x2))) (= z1 x2))))
(set .c13 (or :clauses (.c8) :conclusion ((and (= y1 x1) (= y1 x2)) (and (= z1 x1) (= z1 x2)))))
(set .c14 (and :clauses (.c1) :conclusion ((or (and (= x2 y2) (= x3 y2)) (and (= z2 x2) (= z2 x3))))))
(set .c15 (and_pos :conclusion ((not (and (= x2 y2) (= x3 y2))) (= x2 y2))))
(set .c16 (and_pos :conclusion ((not (and (= x2 y2) (= x3 y2))) (= x3 y2))))
(set .c17 (and_pos :conclusion ((not (and (= z2 x2) (= z2 x3))) (= z2 x2))))
(set .c18 (and_pos :conclusion ((not (and (= z2 x2) (= z2 x3))) (= z2 x3))))
(set .c19 (or :clauses (.c14) :conclusion ((and (= x2 y2) (= x3 y2)) (and (= z2 x2) (= z2 x3)))))
(set .c20 (and :clauses (.c1) :conclusion ((or (and (= y3 x3) (= x4 y3)) (and (= z3 x3) (= z3 x4))))))
(set .c21 (and_pos :conclusion ((not (and (= y3 x3) (= x4 y3))) (= y3 x3))))
(set .c22 (and_pos :conclusion ((not (and (= y3 x3) (= x4 y3))) (= x4 y3))))
(set .c23 (and_pos :conclusion ((not (and (= z3 x3) (= z3 x4))) (= z3 x3))))
(set .c24 (and_pos :conclusion ((not (and (= z3 x3) (= z3 x4))) (= z3 x4))))
(set .c25 (or :clauses (.c20) :conclusion ((and (= y3 x3) (= x4 y3)) (and (= z3 x3) (= z3 x4)))))
(set .c26 (and :clauses (.c1) :conclusion ((or (and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5))))))
(set .c27 (and_pos :conclusion ((not (and (= x4 y4) (= y4 x5))) (= x4 y4))))
(set .c28 (and_pos :conclusion ((not (and (= x4 y4) (= y4 x5))) (= y4 x5))))
(set .c29 (and_pos :conclusion ((not (and (= x4 z4) (= z4 x5))) (= x4 z4))))
(set .c30 (and_pos :conclusion ((not (and (= x4 z4) (= z4 x5))) (= z4 x5))))
(set .c31 (or :clauses (.c26) :conclusion ((and (= x4 y4) (= y4 x5)) (and (= x4 z4) (= z4 x5)))))
(set .c32 (and :clauses (.c1) :conclusion ((or (and (= x5 y5) (= x6 y5)) (and (= z5 x5) (= z5 x6))))))
(set .c33 (and_pos :conclusion ((not (and (= x5 y5) (= x6 y5))) (= x5 y5))))
(set .c34 (and_pos :conclusion ((not (and (= x5 y5) (= x6 y5))) (= x6 y5))))
(set .c35 (and_pos :conclusion ((not (and (= z5 x5) (= z5 x6))) (= z5 x5))))
(set .c36 (and_pos :conclusion ((not (and (= z5 x5) (= z5 x6))) (= z5 x6))))
(set .c37 (or :clauses (.c32) :conclusion ((and (= x5 y5) (= x6 y5)) (and (= z5 x5) (= z5 x6)))))
(set .c38 (and :clauses (.c1) :conclusion ((not (= x6 x0)))))
(set .c39 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c40 (resolution :clauses (.c39 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c41 (resolution :clauses (.c40 .c10 .c9) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= y1 x1) (= y1 x2))))))
(set .c42 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c43 (resolution :clauses (.c42 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c44 (resolution :clauses (.c43 .c12 .c11 .c13 .c41 .c16 .c15) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= x2 y2) (= x3 y2))))))
(set .c45 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c46 (resolution :clauses (.c45 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c47 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c48 (resolution :clauses (.c47 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c49 (resolution :clauses (.c48 .c10 .c9) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= y1 x1) (= y1 x2))))))
(set .c50 (resolution :clauses (.c46 .c12 .c11 .c13 .c49 .c18 .c17 .c19 .c44 .c22 .c21) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= y3 x3) (= x4 y3))))))
(set .c51 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c52 (resolution :clauses (.c51 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c53 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c54 (resolution :clauses (.c53 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c55 (resolution :clauses (.c54 .c16 .c15) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= x2 y2) (= x3 y2))))))
(set .c56 (resolution :clauses (.c52 .c18 .c17 .c19 .c55 .c12 .c11) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= z1 x1) (= z1 x2))))))
(set .c57 (eq_transitive :conclusion ((not (= z1 x2)) (not (= y1 x2)) (not (= y1 x1)) (= z1 x1))))
(set .c58 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c59 (resolution :clauses (.c58 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c60 (resolution :clauses (.c59 .c18 .c17) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= z2 x2) (= z2 x3))))))
(set .c61 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c62 (resolution :clauses (.c61 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c63 (resolution :clauses (.c62 .c16 .c15 .c19 .c60 .c10 .c9 .c13 .c56 .c24 .c23 .c25 .c50 .c28 .c27) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= x4 y4) (= y4 x5))))))
(set .c64 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c65 (resolution :clauses (.c64 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c66 (resolution :clauses (.c65 .c10 .c9) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= y1 x1) (= y1 x2))))))
(set .c67 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c68 (resolution :clauses (.c67 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c69 (resolution :clauses (.c68 .c12 .c11 .c13 .c66) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c70 (eq_transitive :conclusion ((not (= z2 x3)) (not (= z2 x2)) (not (= x2 y2)) (= x3 y2))))
(set .c71 (resolution :clauses (.c70 .c18 .c17 .c19 .c16) :conclusion ((not (= x2 y2)) (= x3 y2))))
(set .c72 (eq_transitive :conclusion ((not (= z3 x3)) (not (= y3 x3)) (not (= x4 y3)) (= z3 x4))))
(set .c73 (resolution :clauses (.c72 .c22 .c21 .c25 .c24 .c69) :conclusion ((not (= z3 x3)) (not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x3 y2)) (not (= x2 y2)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c74 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c75 (resolution :clauses (.c74 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c76 (resolution :clauses (.c57 .c10 .c9 .c13 .c11 .c75) :conclusion ((not (= z1 x2)) (not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c77 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c78 (resolution :clauses (.c77 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c79 (resolution :clauses (.c78 .c10 .c9 .c13 .c12 .c76 .c22 .c21 .c25 .c23 .c73 .c71) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x2 y2)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c80 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c81 (resolution :clauses (.c80 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c82 (resolution :clauses (.c81 .c10 .c9) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= y1 x1) (= y1 x2))))))
(set .c83 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c84 (resolution :clauses (.c83 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c85 (resolution :clauses (.c84 .c12 .c11 .c13 .c82 .c22 .c21) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z2 x3)) (not (= z2 x2)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= y3 x3) (= x4 y3))))))
(set .c86 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c87 (resolution :clauses (.c86 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c88 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c89 (resolution :clauses (.c88 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c90 (resolution :clauses (.c89 .c10 .c9) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= y1 x1) (= y1 x2))))))
(set .c91 (resolution :clauses (.c87 .c12 .c11 .c13 .c90 .c24 .c23 .c25 .c85 .c18 .c17 .c19 .c15 .c79 .c30 .c29 .c31 .c63 .c34 .c33) :conclusion ((not (= z0 x1)) (not (= z0 x0)) (not (and (= x5 y5) (= x6 y5))))))
(set .c92 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c93 (resolution :clauses (.c92 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c94 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c95 (resolution :clauses (.c94 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c96 (resolution :clauses (.c95 .c28 .c27) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= x4 y4) (= y4 x5))))))
(set .c97 (resolution :clauses (.c93 .c30 .c29 .c31 .c96 .c18 .c17) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z3 x4)) (not (= z3 x3)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= z2 x2) (= z2 x3))))))
(set .c98 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c99 (resolution :clauses (.c98 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c100 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c101 (resolution :clauses (.c100 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c102 (resolution :clauses (.c101 .c28 .c27) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= x4 y4) (= y4 x5))))))
(set .c103 (resolution :clauses (.c99 .c30 .c29 .c31 .c102 .c16 .c15 .c19 .c97 .c10 .c9) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z3 x4)) (not (= z3 x3)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= y1 x1) (= y1 x2))))))
(set .c104 (eq_transitive :conclusion ((not (= y1 x2)) (not (= z1 x2)) (not (= z1 x1)) (= y1 x1))))
(set .c105 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c106 (resolution :clauses (.c105 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c107 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c108 (resolution :clauses (.c107 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c109 (resolution :clauses (.c108 .c28 .c27) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= x4 y4) (= y4 x5))))))
(set .c110 (resolution :clauses (.c106 .c30 .c29 .c31 .c109 .c71) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z3 x4)) (not (= z3 x3)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c111 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c112 (resolution :clauses (.c111 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c113 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c114 (resolution :clauses (.c113 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c115 (resolution :clauses (.c114 .c28 .c27) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= x4 y4) (= y4 x5))))))
(set .c116 (resolution :clauses (.c112 .c30 .c29 .c31 .c115 .c18 .c17 .c19 .c15 .c110 .c12 .c11 .c13 .c103) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z3 x4)) (not (= z3 x3)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c117 (resolution :clauses (.c72 .c22 .c21 .c25 .c24 .c116) :conclusion ((not (= z3 x3)) (not (= z5 x6)) (not (= z5 x5)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c118 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c119 (resolution :clauses (.c118 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c120 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c121 (resolution :clauses (.c120 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c122 (resolution :clauses (.c121 .c28 .c27) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= x4 y4) (= y4 x5))))))
(set .c123 (resolution :clauses (.c119 .c30 .c29 .c31 .c122 .c12 .c11) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= z1 x1) (= z1 x2))))))
(set .c124 (eq_transitive :conclusion ((not (= z1 x1)) (not (= y1 x1)) (not (= y1 x2)) (= z1 x2))))
(set .c125 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c126 (resolution :clauses (.c125 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c127 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c128 (resolution :clauses (.c127 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c129 (resolution :clauses (.c128 .c28 .c27) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= x4 y4) (= y4 x5))))))
(set .c130 (resolution :clauses (.c126 .c30 .c29 .c31 .c129 .c10 .c9 .c13 .c123 .c18 .c17) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= x4 y3)) (not (= y3 x3)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= z2 x2) (= z2 x3))))))
(set .c131 (eq_transitive :conclusion ((not (= z2 x2)) (not (= x2 y2)) (not (= x3 y2)) (= z2 x3))))
(set .c132 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c133 (resolution :clauses (.c132 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c134 (resolution :clauses (.c133 .c30 .c29) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= x4 z4) (= z4 x5))))))
(set .c135 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c136 (resolution :clauses (.c135 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c137 (resolution :clauses (.c136 .c28 .c27 .c31 .c134) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c138 (resolution :clauses (.c104 .c12 .c11 .c13 .c9 .c137) :conclusion ((not (= y1 x2)) (not (= z5 x6)) (not (= z5 x5)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c139 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c140 (resolution :clauses (.c139 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c141 (resolution :clauses (.c140 .c28 .c27) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)) (not (and (= x4 y4) (= y4 x5))))))
(set .c142 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)) (= x6 x0))))
(set .c143 (resolution :clauses (.c142 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= z0 x1)) (not (= z0 x0)))))
(set .c144 (resolution :clauses (.c143 .c30 .c29 .c31 .c141 .c12 .c11 .c13 .c10 .c138 .c16 .c15 .c19 .c130 .c22 .c21 .c25 .c23 .c117 .c36 .c35 .c37 .c91 .c6 .c5) :conclusion ((not (and (= z0 x0) (= z0 x1))))))
(set .c145 (resolution :clauses (.c7 .c144) :conclusion ((and (= y0 x0) (= y0 x1)))))
(set .c146 (resolution :clauses (.c3 .c145) :conclusion ((= y0 x0))))
(set .c147 (resolution :clauses (.c4 .c145) :conclusion ((= y0 x1))))
(set .c148 (eq_transitive :conclusion ((not (= z5 x6)) (not (= x6 y5)) (not (= x5 y5)) (= z5 x5))))
(set .c149 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c150 (resolution :clauses (.c149 .c146 .c147 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c151 (resolution :clauses (.c72 .c22 .c21 .c25 .c24) :conclusion ((not (= z3 x3)) (= z3 x4))))
(set .c152 (resolution :clauses (.c150 .c18 .c17) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z1 x2)) (not (= z1 x1)) (not (and (= z2 x2) (= z2 x3))))))
(set .c153 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c154 (resolution :clauses (.c153 .c146 .c147 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c155 (resolution :clauses (.c154 .c16 .c15 .c19 .c152 .c151) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x3)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c156 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c157 (resolution :clauses (.c156 .c146 .c147 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c158 (resolution :clauses (.c157 .c71) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c159 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c160 (resolution :clauses (.c159 .c146 .c147 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c161 (resolution :clauses (.c160 .c18 .c17 .c19 .c15 .c158 .c22 .c21 .c25 .c23 .c155 .c12 .c11) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (and (= z1 x1) (= z1 x2))))))
(set .c162 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c163 (resolution :clauses (.c162 .c146 .c147 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)))))
(set .c164 (resolution :clauses (.c131 .c16 .c15 .c19 .c18) :conclusion ((not (= z2 x2)) (= z2 x3))))
(set .c165 (resolution :clauses (.c163 .c22 .c21) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (and (= y3 x3) (= x4 y3))))))
(set .c166 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c167 (resolution :clauses (.c166 .c146 .c147 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)))))
(set .c168 (resolution :clauses (.c167 .c24 .c23 .c25 .c165 .c164) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)))))
(set .c169 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c170 (resolution :clauses (.c169 .c146 .c147 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)))))
(set .c171 (resolution :clauses (.c170 .c151) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)))))
(set .c172 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c173 (resolution :clauses (.c172 .c146 .c147 .c38) :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)))))
(set .c174 (resolution :clauses (.c173 .c22 .c21 .c25 .c23 .c171 .c16 .c15 .c19 .c17 .c168 .c10 .c9 .c13 .c161 .c34 .c33) :conclusion ((not (= z4 x5)) (not (= x4 z4)) (not (and (= x5 y5) (= x6 y5))))))
(set .c175 (resolution :clauses (.c104 .c12 .c11 .c13 .c9) :conclusion ((not (= y1 x2)) (= y1 x1))))
(set .c176 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c177 (resolution :clauses (.c176 .c146 .c147 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)))))
(set .c178 (resolution :clauses (.c177 .c175) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)))))
(set .c179 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c180 (resolution :clauses (.c179 .c146 .c147 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c181 (resolution :clauses (.c180 .c12 .c11 .c13 .c10 .c178 .c71) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x2 y2)))))
(set .c182 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c183 (resolution :clauses (.c182 .c146 .c147 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c184 (resolution :clauses (.c124 .c10 .c9 .c13 .c12 .c183) :conclusion ((not (= z1 x1)) (not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)))))
(set .c185 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c186 (resolution :clauses (.c185 .c146 .c147 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)))))
(set .c187 (resolution :clauses (.c186 .c10 .c9 .c13 .c11 .c184 .c18 .c17 .c19 .c15 .c181) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= x4 y3)) (not (= y3 x3)))))
(set .c188 (eq_transitive :conclusion ((not (= z3 x4)) (not (= z3 x3)) (not (= y3 x3)) (= x4 y3))))
(set .c189 (resolution :clauses (.c188 .c24 .c23 .c25 .c22 .c187) :conclusion ((not (= y3 x3)) (not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)))))
(set .c190 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c191 (resolution :clauses (.c190 .c146 .c147 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)))))
(set .c192 (resolution :clauses (.c191 .c18 .c17) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= y1 x2)) (not (= y1 x1)) (not (and (= z2 x2) (= z2 x3))))))
(set .c193 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c194 (resolution :clauses (.c193 .c146 .c147 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)))))
(set .c195 (resolution :clauses (.c194 .c16 .c15 .c19 .c192 .c175) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= y1 x2)))))
(set .c196 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c197 (resolution :clauses (.c196 .c146 .c147 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c198 (resolution :clauses (.c197 .c71) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c199 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c200 (resolution :clauses (.c199 .c146 .c147 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z4 x5)) (not (= x4 z4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c201 (resolution :clauses (.c200 .c18 .c17 .c19 .c15 .c198 .c12 .c11 .c13 .c10 .c195 .c24 .c23 .c25 .c21 .c189 .c36 .c35 .c37 .c174) :conclusion ((not (= z4 x5)) (not (= x4 z4)))))
(set .c202 (eq_transitive :conclusion ((not (= x4 z4)) (not (= x4 y4)) (not (= y4 x5)) (= z4 x5))))
(set .c203 (resolution :clauses (.c202 .c28 .c27 .c31 .c30 .c201) :conclusion ((not (= x4 z4)))))
(set .c204 (resolution :clauses (.c29 .c203) :conclusion ((not (and (= x4 z4) (= z4 x5))))))
(set .c205 (resolution :clauses (.c31 .c204) :conclusion ((and (= x4 y4) (= y4 x5)))))
(set .c206 (resolution :clauses (.c27 .c205) :conclusion ((= x4 y4))))
(set .c207 (resolution :clauses (.c28 .c205) :conclusion ((= y4 x5))))
(set .c208 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c209 (resolution :clauses (.c208 .c146 .c147 .c206 .c207 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c210 (resolution :clauses (.c209 .c18 .c17) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z3 x4)) (not (= z3 x3)) (not (= z1 x2)) (not (= z1 x1)) (not (and (= z2 x2) (= z2 x3))))))
(set .c211 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c212 (resolution :clauses (.c211 .c146 .c147 .c206 .c207 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c213 (resolution :clauses (.c212 .c16 .c15 .c19 .c210 .c151) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z3 x3)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c214 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c215 (resolution :clauses (.c214 .c146 .c147 .c206 .c207 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c216 (resolution :clauses (.c215 .c71) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= x4 y3)) (not (= y3 x3)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c217 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c218 (resolution :clauses (.c217 .c146 .c147 .c206 .c207 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c219 (resolution :clauses (.c218 .c18 .c17 .c19 .c15 .c216 .c22 .c21 .c25 .c23 .c213) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c220 (resolution :clauses (.c148 .c34 .c33 .c37 .c35) :conclusion ((not (= z5 x6)) (= z5 x5))))
(set .c221 (resolution :clauses (.c124 .c10 .c9 .c13 .c12 .c219) :conclusion ((not (= z1 x1)) (not (= z5 x6)) (not (= z5 x5)))))
(set .c222 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c223 (resolution :clauses (.c222 .c146 .c147 .c206 .c207 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)))))
(set .c224 (resolution :clauses (.c223 .c18 .c17) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= x4 y3)) (not (= y3 x3)) (not (= y1 x2)) (not (= y1 x1)) (not (and (= z2 x2) (= z2 x3))))))
(set .c225 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c226 (resolution :clauses (.c225 .c146 .c147 .c206 .c207 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)))))
(set .c227 (resolution :clauses (.c226 .c16 .c15 .c19 .c224 .c22 .c21) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y1 x2)) (not (= y1 x1)) (not (and (= y3 x3) (= x4 y3))))))
(set .c228 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c229 (resolution :clauses (.c228 .c146 .c147 .c206 .c207 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)))))
(set .c230 (resolution :clauses (.c229 .c71) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z3 x4)) (not (= z3 x3)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)))))
(set .c231 (eq_transitive :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c232 (resolution :clauses (.c231 .c146 .c147 .c206 .c207 .c38) :conclusion ((not (= z5 x6)) (not (= z5 x5)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)))))
(set .c233 (resolution :clauses (.c232 .c18 .c17 .c19 .c15 .c230 .c24 .c23 .c25 .c227 .c10 .c9 .c13 .c11 .c221 .c220) :conclusion ((not (= z5 x6)))))
(set .c234 (resolution :clauses (.c36 .c233) :conclusion ((not (and (= z5 x5) (= z5 x6))))))
(set .c235 (resolution :clauses (.c37 .c234) :conclusion ((and (= x5 y5) (= x6 y5)))))
(set .c236 (resolution :clauses (.c33 .c235) :conclusion ((= x5 y5))))
(set .c237 (resolution :clauses (.c34 .c235) :conclusion ((= x6 y5))))
(set .c238 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c239 (resolution :clauses (.c238 .c146 .c147 .c206 .c207 .c236 .c237 .c38) :conclusion ((not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)))))
(set .c240 (resolution :clauses (.c239 .c151) :conclusion ((not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)))))
(set .c241 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c242 (resolution :clauses (.c241 .c146 .c147 .c206 .c207 .c236 .c237 .c38) :conclusion ((not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)) (not (= y1 x1)))))
(set .c243 (resolution :clauses (.c242 .c22 .c21 .c25 .c23 .c240 .c175) :conclusion ((not (= z2 x3)) (not (= z2 x2)) (not (= y1 x2)))))
(set .c244 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c245 (resolution :clauses (.c244 .c146 .c147 .c206 .c207 .c236 .c237 .c38) :conclusion ((not (= x4 y3)) (not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c246 (resolution :clauses (.c188 .c24 .c23 .c25 .c22 .c245) :conclusion ((not (= y3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c247 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c248 (resolution :clauses (.c247 .c146 .c147 .c206 .c207 .c236 .c237 .c38) :conclusion ((not (= z3 x4)) (not (= z3 x3)) (not (= z2 x3)) (not (= z2 x2)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c249 (resolution :clauses (.c248 .c24 .c23 .c25 .c21 .c246 .c12 .c11 .c13 .c10 .c243 .c164) :conclusion ((not (= z2 x2)))))
(set .c250 (resolution :clauses (.c17 .c249) :conclusion ((not (and (= z2 x2) (= z2 x3))))))
(set .c251 (resolution :clauses (.c19 .c250) :conclusion ((and (= x2 y2) (= x3 y2)))))
(set .c252 (resolution :clauses (.c15 .c251) :conclusion ((= x2 y2))))
(set .c253 (resolution :clauses (.c16 .c251) :conclusion ((= x3 y2))))
(set .c254 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c255 (resolution :clauses (.c254 .c146 .c147 .c252 .c253 .c206 .c207 .c236 .c237 .c38) :conclusion ((not (= z3 x4)) (not (= z3 x3)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c256 (resolution :clauses (.c255 .c151) :conclusion ((not (= z3 x3)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c257 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= z1 x2)) (not (= z1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c258 (resolution :clauses (.c257 .c146 .c147 .c252 .c253 .c206 .c207 .c236 .c237 .c38) :conclusion ((not (= x4 y3)) (not (= y3 x3)) (not (= z1 x2)) (not (= z1 x1)))))
(set .c259 (resolution :clauses (.c258 .c22 .c21 .c25 .c23 .c256) :conclusion ((not (= z1 x2)) (not (= z1 x1)))))
(set .c260 (resolution :clauses (.c124 .c10 .c9 .c13 .c12 .c259) :conclusion ((not (= z1 x1)))))
(set .c261 (resolution :clauses (.c11 .c260) :conclusion ((not (and (= z1 x1) (= z1 x2))))))
(set .c262 (resolution :clauses (.c13 .c261) :conclusion ((and (= y1 x1) (= y1 x2)))))
(set .c263 (resolution :clauses (.c9 .c262) :conclusion ((= y1 x1))))
(set .c264 (resolution :clauses (.c10 .c262) :conclusion ((= y1 x2))))
(set .c265 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= x4 y3)) (not (= y3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c266 (resolution :clauses (.c265 .c146 .c147 .c263 .c264 .c252 .c253 .c206 .c207 .c236 .c237 .c38) :conclusion ((not (= x4 y3)) (not (= y3 x3)))))
(set .c267 (resolution :clauses (.c266 .c22 .c21) :conclusion ((not (and (= y3 x3) (= x4 y3))))))
(set .c268 (resolution :clauses (.c25 .c267) :conclusion ((and (= z3 x3) (= z3 x4)))))
(set .c269 (resolution :clauses (.c23 .c268) :conclusion ((= z3 x3))))
(set .c270 (resolution :clauses (.c24 .c268) :conclusion ((= z3 x4))))
(set .c271 (eq_transitive :conclusion ((not (= x6 y5)) (not (= x5 y5)) (not (= y4 x5)) (not (= x4 y4)) (not (= z3 x4)) (not (= z3 x3)) (not (= x3 y2)) (not (= x2 y2)) (not (= y1 x2)) (not (= y1 x1)) (not (= y0 x1)) (not (= y0 x0)) (= x6 x0))))
(set .c272 (resolution :clauses (.c271 .c146 .c147 .c263 .c264 .c252 .c253 .c269 .c270 .c206 .c207 .c236 .c237 .c38) :conclusion ()))
