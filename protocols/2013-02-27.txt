 ***********************
* GAPT Meeting Protocol *
 ***********************

Date: 2013-02-27
People: Giselle, David, Cvetan, Stefan, Martin
Protocol: Martin
Begin: 14:00
End: 15:55
Next meeting: 2013-03-11 12:00 Menger

= General Stuff =

We decided to list the open problems, give a bit of a description to everyone and evaluate how important we deem it. We explicitly decided to postpone most of the decisions to the next meeting where also Daniel will be present.

= GitHub =

There were several propositions to move our project to GitHub. Working with Google Code works sufficiently for most people. We are looking for reasons why to change:

* One reason is that GitHub has mechanics which prevent you to get the global repository into an inconsistent state.

  Some rituals before checking in might help: svn status, (perhaps in combination with svn ignore flags) and svn diff.

* Another reason is that git allows easier moving of files.

 In the discussion we found out that there is a topic svn or git and the other is google code or github. Moving to git is easy, but to github is hard, because we have to move the wiki and the issue tracker too. At the moment we decided to postpone the decision for git and decided to stay on google code.

Priority: low.

= CERES for FOL =

Our latest system demonstration showed that the the production of the ACNF is still missing for FO proofs. Cvetan's code for schemata can also produce the projections for FOL.
RobinsonToLK has a very similar way of working, so we could check what the effort of generalizing it to projections is.

Priority: high.

= Demonstrations/Examples in the System = 

We have a system for download but don't give any instructions on how to use them and most examples are scattered over different papers.
The idea is to compile the examples into the user's guide. Possible recent candidates to go in there are cut-introduction paper example, journal example for schemata. 

Idea: put all the examples of the user guide into the integration tests too.
Idea: put all intemediary and example files into the zip file download.

Priority: middle.

= Central repository for all examples to prevent copies in different subprojects =

In the last point we found out, that there are also multiple copies of the same testfiles in the system and that they are scattered throughout the whole project.
Maven allows the sharing of common resources by introducing a common repository on which all the projects using them depend. We could use this repository to 
get a collection of all the proofs.

Priority: low - middle.

= Windows as target =

At the moment we have some dependencies on external programs which work differently in windows. Should we change this?

Priority: low.

= Simplify filesystem structure and maven module stucture =

We have a deep filesystem structure and lots of maven modules.

During the discussion we found out that these are mostly independent but that both are confusing. 
Even with incremental compiling we want to have interleaving compile - test cycles such that we can really rely e.g. on the datastructures before we compile a unification algorithm. 
So to a certain point, they make sense.

Conclusion: we want to simplify both structures. 

Priority: middle.

= Copyright notice =

Tomer suggested to take core of it. Martin will add the copyright notice to the cli. We decided to not put the copyright notice in each file.

Priority: low.

= Tracking term occurrences =

Many algorithms require us to trace the variables bound to a specific quantifier through a proof transformation (e.g.: skolemization, regularization, robinson2lk, etc. ). 
At the moment we relay on remembering the variable name or the bound variable name (the object you get by using getFreeAndBoundVariables()._2, AbsInScope or ForAllInScope ).
There is an example where both methods do not work: given the formula "exists x P(x) & all x Q(x)" and we want to track only the weakly quantified x to the term t it is a witness for and substitute alpha for the eigenvariable of the strongly quantified x. Then using the name x is ambiguous. Also both occurrences of x have the same de Bruijn index (both in our implementation and the original version), so also our current implementation cannot distinguish the occurrences. 

We discussed a possible approach: Just use the term rewriting notation to point to an occurrence. This needs more discussion.

Priority: high.

= Common way to denote Formula Occurrences and Term Occurrences =
During the discussion about implementing position we had the ideo to have a common way to denote formula occurrences and expression occurrences. 
At the moment this is not possible because the Sequent is intended as (unordered) multiset, therefore there is no index into the antecedent. 
Daniel mentioned that this was a design decision, so we need to ask him on the deeper reasons.

= It is not clear what kind of rules a function transform(p:LKProof) can handle =

The current situation is that we extend the basic LK by just adding more rules. Sometimes we label them by adding an additional trait.
This only allows reuse of old rules but makes it hard to declare for an algorithm, which rules it handles. 
At the moment we just get match exceptions when we encounter an unhandled rule during execution.

Priority: low-middle.

= Necessity of the de Bruijn indices =

There are three main issues with de Bruijn indices:

1) We implemented a variant of de Bruijn indices which behaves a bit differently from other implementations.
2) At some points in gaot we rely on the names of variables and in some we rely on the db index. This is error prone.
3) We use db indices to track occurrences of a variable, but this does not work in general.

We talked a lot about the current implementation and defined some requirements, our implementation has to meet:

The solution needs to solve the following:
-- substitution (might need variable renaming)
-- beta reduction
-- allow tracking of a variable occurrence to a proof (not necessary in the lambda calculus implementation itself)
-- get a list of free and a list of bound variables occurring in a formula

We also discussed a first step would be to remove all calls to getFreeAndBoundVariables, AbsInScope and ForAllInScope. 
Martin will prepare a list of packages where it is used for the next meeting.


= Issues list =

There are some issues on the issue list which are not recent or not assigned to anyone. Martin will also present a list of the issues next time.

= Next Meeting =

Stefan mentioned he can not come on Friday and Martin cannot come on Monday morning, so we decided to move the meeting to 12:00 which should suit everyone. 
Martin will send an email for the next meeting.

