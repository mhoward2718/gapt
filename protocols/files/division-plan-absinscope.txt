Daniel:
./transformations/skolemization/src/main/scala/at/logic/transformations/skolemization/skolemization.scala:26:import typedLambdaCalculus.{AbsInScope, App, Var, LambdaExpression}
./algorithms/fol/src/main/scala/at/logic/algorithms/fol/hol2fol.scala:38:      case a @ AbsInScope(v, exp) => {
./algorithms/matching/src/main/scala/at/logic/algorithms/matching/hol/NaiveIncompleteMatchingAlgorithm.scala:41:      case ( HOLAbsInScope(v1, e1), HOLAbsInScope(v2, e2) ) if v1 == v2 => holMatch( e1, e2 )
./algorithms/matching/src/main/scala/at/logic/algorithms/matching/hol/NaiveIncompleteMatchingAlgorithm.scala:42:      case ( HOLAbsInScope(v1, e1), HOLAbsInScope(v2, e2) ) if v1 != v2 => None
./syntax/calculi/lk/src/main/scala/at/logic/calculi/lk/base.scala:179:      case AbsInScope(v,t) =>
./parsing/ceres_xml_parsing/src/main/scala/at/logic/parsing/language/xml/XMLParser.scala:56:      case ( HOLAbsInScope(v1, e1), HOLAbsInScope(v2, e2) ) if v1 == v2 => apply( e1, e2 )
./parsing/ceres_xml_parsing/src/main/scala/at/logic/parsing/language/xml/XMLParser.scala:57:      case ( HOLAbsInScope(v1, e1), HOLAbsInScope(v2, e2) ) if v1 != v2 => None

Martin:
./algorithms/normalization/src/main/scala/at/logic/algorithms/normalization/TermNormalizer.scala:20:    case AbsInScope(v, e1) => Abs(apply(v,map, nextId).asInstanceOf[Var], apply(e1,map, nextId))
./syntax/calculi/lk_modulo/src/main/scala/at/logic/calculi/lkmodulo/lkmodulo.scala:182:      case AbsInScope(lambdavar, exp) =>

Giselle:
./algorithms/lk/src/main/scala/at/logic/algorithms/lk/simplification.scala:72:      case AbsInScope(_,a) => isGround(a)
./gui/prooftool/src/main/scala/at/logic/gui/prooftool/gui/DrawSequent.scala:182:    case AbsInScope(v, s) => "(" + """ \lambda """ + formulaToLatexString(v) + """.""" + formulaToLatexString(s) + ")"
./syntax/language/fol/src/main/scala/at/logic/language/fol/fol.scala:380:    case Ex(AbsInScope(variable: FOLVar, sub: FOLFormula), _) => Some( (variable, sub) )
./syntax/language/fol/src/main/scala/at/logic/language/fol/fol.scala:388:    case All(AbsInScope(variable: FOLVar, sub: FOLFormula), _) => Some( (variable, sub) )
./syntax/language/fol/src/main/scala/at/logic/language/fol/utils.scala:13:import _root_.at.logic.language.lambda.typedLambdaCalculus.{AbsInScope, App, Var, LambdaExpression}
./syntax/language/fol/src/main/scala/at/logic/language/fol/utils.scala:35:    case AbsInScope(v, exp) => {
./syntax/language/hol/src/main/scala/at/logic/language/hol.scala:44:      case AbsInScope(v, exp) => "(λ" + v.toString + "." + exp.toString + ")"
./syntax/language/hol/src/main/scala/at/logic/language/hol.scala:69:      case AbsInScope(v, exp) => "λ" + v.toString + "." + exp.toString
./syntax/language/hol/src/main/scala/at/logic/language/hol.scala:92:      case AbsInScope(v, exp) => "(λ" + v.toString + "." + exp.toString + ")"
./syntax/language/hol/src/main/scala/at/logic/language/hol.scala:108:      case AbsInScope(v, exp) => exp.asInstanceOf[HOLExpression].containsQuantifier
./syntax/language/hol/src/main/scala/at/logic/language/hol.scala:136:      case HOLAbsInScope(_, x) => this +: x.subTerms
./syntax/language/hol/src/main/scala/at/logic/language/hol.scala:203:  object HOLAbsInScope {
./syntax/language/hol/src/main/scala/at/logic/language/hol.scala:394:      case Ex(AbsInScope(variable, sub), _) => Some( (variable, sub.asInstanceOf[HOLFormula]) )
./syntax/language/hol/src/main/scala/at/logic/language/hol.scala:410:      case All(AbsInScope(variable, sub), _) => Some( (variable, sub.asInstanceOf[HOLFormula]) )


Last one:
./syntax/language/lambda/src/main/scala/at/logic/language/lambda/typedLambdaCalculus.scala:36:      case AbsInScope(v, exp) => {
./syntax/language/lambda/src/main/scala/at/logic/language/lambda/typedLambdaCalculus.scala:178:      case AbsInScope(v,exp) => (v =^ variableInScope && exp =^ expressionInScope && e.exptype == exptype)
./syntax/language/lambda/src/main/scala/at/logic/language/lambda/typedLambdaCalculus.scala:207:      case AbsInScope(v,_) => v.dbIndex.get
./syntax/language/lambda/src/main/scala/at/logic/language/lambda/typedLambdaCalculus.scala:213:      case AbsInScope( v, e ) => expressionInScope.compare( e )
./syntax/language/lambda/src/main/scala/at/logic/language/lambda/typedLambdaCalculus.scala:236:  object AbsInScope {
./syntax/language/lambda/src/main/scala/at/logic/language/lambda/typedLambdaCalculus.scala:392:      case AbsInScope(variable, exp) => "\\" + exportLambdaExpressionToString(variable) + "." + exportLambdaExpressionToString(exp)
./syntax/language/lambda/src/main/scala/at/logic/language/lambda/typedLambdaCalculus.scala:399:      case AbsInScope(variable, exp) => "\\" + exportLambdaExpressionToString(variable) + "." + exportLambdaExpressionToString(exp)
./syntax/language/lambda/src/main/scala/at/logic/language/lambda/substitutions.scala:42:      case AbsInScope(v,t) =>
./syntax/language/lambda/src/main/scala/at/logic/language/lambda/BetaReduction.scala:46:    case App(AbsInScope(x,body),arg) => {
