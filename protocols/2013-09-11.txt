 ***********************
* GAPT Meeting Protocol *
 ***********************

Date: 11.09.2013
People: Bruno, Giselle, Stefan, Martin
Protocol: Martin
Begin: 15:00
End: 16:55

= Reimplementation of Typed Lambda Calculus =

We discussed the benefits of adding constants as their own class to lambda calculus. The current implementation works that lambda calculus only contains classes for Var, Abs and App; the difference between constants and variables is made by distinguishing symbols dervied from ConstantSymbolA and VariableSymbolA, i.e. the type constructor of Abs(x,t) checks if the symbol of x is a VariableSymbolA.

The alternative is the introduction of a class Const which represents Constants in lambda calculus. In turn we could remove the distinction on the symbol level.

Pros of adding Const:
* Homogenity between FOL, HOL and lambda
* Easier understanding of lambda calculus to newcomers (no constant vars)
* "case Var(x@ConstantSymbolA,_ ) => " becomes "Const(x, _) => " in match clauses
* easier implementation of Abs
* symbols are defined in a single module


Cons:
* StringSymbols are mentioned ~1300 times in the code
* one more case distinction for recursions on lambda terms

Outcome: We decided to add constants to lambda and simplify the symbol library.

Remark: we discussed, why symbols are even necessary. We had two examples:

1) it might be more space efficient to represent symbols as integers in case of large proofs, so that we might add a new symbol class
2) to track renaming of variables, we could add a class which contains the original symbol and an integer to prevent cases like x_1_2 and allow renaming to the original symbol, if possible

= Substitiution does not need knowledge about variable names =

We already had the topic but made clear that in the case of variable capture, the variable name must only be different from anything in the subterm, i.e. in the case of substituting y for x in \y t, the renaming of y must only be different from any variable in t but needs not globally fresh.

= VariantSymbol =

We discussed the implementation of VariantSymbol and found out that we implement symbol creation incorrectly. The idea for VariantSymbol is the following:

class VariantSymbol(val sym : SymbolA, val i : Int);

object VariantSymbol {
  def apply(sym : SymbolA, context : List[SymbolA] ) = sym match { 
      case VariantSymbol(osym, i) => 
        var j = i+1; 
        var s = new VariantSymbol(osym, j); 
        while (context contains s) { 
         j = j +1
         s = new VariantSymbol(osym, j)
	}

      case _ => new VariantSymbol(sym, 0)
  }
}

i.e. the name is kept and a counter keeps tracks of the ith variant. During creation a context is passed down to prevent duplicates.

During we found out, that we also need to handle symbol creation consistently. The main use case was for getting fresh variables for renamings. E.g. to unify the clauses P(x,b) and P(a,x), we need to first rename one x. For this we create a new symbol, but want to make sure that a VariantSymbol is not replaced by a StringSymbol. This means the renaming algorithm needs to know about all symbol types in the system. Our solution was that we will introduce a function getRenaming which will return a correctly created symbol. Since we could not think of other cases, a general factory for symbols seems to be unneccessary at the moment.


