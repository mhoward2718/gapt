============================== Prover9 ===============================
Prover9 (32) version 2009-11A, November 2009.
Process 8802 was started by tptp on yorktown.cs.miami.edu,
Wed Jun 13 11:22:45 2012
The command was "/home/graph/tptp/Systems/Prover9---1109a/prover9 -t 300 -f /tmp/Prover9_8768_yorktown.cs.miami.edu".
============================== end of head ===========================
============================== INPUT =================================
% Reading from file /tmp/Prover9_8768_yorktown.cs.miami.edu
set(prolog_style_variables).
set(auto2).
    % set(auto2) -> set(auto).
    % set(auto) -> set(auto_inference).
    % set(auto) -> set(auto_setup).
    % set(auto_setup) -> set(predicate_elim).
    % set(auto_setup) -> assign(eq_defs, unfold).
    % set(auto) -> set(auto_limits).
    % set(auto_limits) -> assign(max_weight, "100.000").
    % set(auto_limits) -> assign(sos_limit, 20000).
    % set(auto) -> set(auto_denials).
    % set(auto) -> set(auto_process).
    % set(auto2) -> assign(new_constants, 1).
    % set(auto2) -> assign(fold_denial_max, 3).
    % set(auto2) -> assign(max_weight, "200.000").
    % set(auto2) -> assign(max_hours, 1).
    % assign(max_hours, 1) -> assign(max_seconds, 3600).
    % set(auto2) -> assign(max_seconds, 0).
    % set(auto2) -> assign(max_minutes, 5).
    % assign(max_minutes, 5) -> assign(max_seconds, 300).
    % set(auto2) -> set(sort_initial_sos).
    % set(auto2) -> assign(sos_limit, -1).
    % set(auto2) -> assign(lrs_ticks, 3000).
    % set(auto2) -> assign(max_megs, 400).
    % set(auto2) -> assign(stats, some).
    % set(auto2) -> clear(echo_input).
    % set(auto2) -> set(quiet).
    % set(auto2) -> clear(print_initial_clauses).
    % set(auto2) -> clear(print_given).
assign(lrs_ticks,-1).
assign(sos_limit,10000).
assign(order,kbo).
set(lex_order_vars).
clear(print_given).
% formulas(sos).  % not echoed (130 formulas)
============================== end of input ==========================
% From the command line: assign(max_seconds, 300).
============================== PROCESS NON-CLAUSAL FORMULAS ==========
% Formulas that are not ordinary clauses:
1 -(e0 = op(e2,e3) & e1 = op(op(e2,e3),e3)) # label(ax6) # label(axiom) # label(non_clause).  [assumption].
2 -(e0 = op(e3,e2) & e1 = op(op(e3,e2),e2)) # label(ax7) # label(axiom) # label(non_clause).  [assumption].
3 -(e0 = op(e1,e3) & e2 = op(op(e1,e3),e3)) # label(ax8) # label(axiom) # label(non_clause).  [assumption].
4 -(e0 = op(e3,e1) & e2 = op(op(e3,e1),e1)) # label(ax9) # label(axiom) # label(non_clause).  [assumption].
5 -(e0 = op(e1,e2) & e3 = op(op(e1,e2),e2)) # label(ax10) # label(axiom) # label(non_clause).  [assumption].
6 -(e0 = op(e2,e1) & e3 = op(op(e2,e1),e1)) # label(ax11) # label(axiom) # label(non_clause).  [assumption].
7 -(e1 = op(e2,e3) & e0 = op(op(e2,e3),e3)) # label(ax12) # label(axiom) # label(non_clause).  [assumption].
8 -(e1 = op(e3,e2) & e0 = op(op(e3,e2),e2)) # label(ax13) # label(axiom) # label(non_clause).  [assumption].
9 -(e1 = op(e0,e3) & e2 = op(op(e0,e3),e3)) # label(ax14) # label(axiom) # label(non_clause).  [assumption].
10 -(e1 = op(e3,e0) & e2 = op(op(e3,e0),e0)) # label(ax15) # label(axiom) # label(non_clause).  [assumption].
11 -(e1 = op(e0,e2) & e3 = op(op(e0,e2),e2)) # label(ax16) # label(axiom) # label(non_clause).  [assumption].
12 -(e1 = op(e2,e0) & e3 = op(op(e2,e0),e0)) # label(ax17) # label(axiom) # label(non_clause).  [assumption].
13 -(e2 = op(e1,e3) & e0 = op(op(e1,e3),e3)) # label(ax18) # label(axiom) # label(non_clause).  [assumption].
14 -(e2 = op(e3,e1) & e0 = op(op(e3,e1),e1)) # label(ax19) # label(axiom) # label(non_clause).  [assumption].
15 -(e2 = op(e0,e3) & e1 = op(op(e0,e3),e3)) # label(ax20) # label(axiom) # label(non_clause).  [assumption].
16 -(e2 = op(e3,e0) & e1 = op(op(e3,e0),e0)) # label(ax21) # label(axiom) # label(non_clause).  [assumption].
17 -(e2 = op(e0,e1) & e3 = op(op(e0,e1),e1)) # label(ax22) # label(axiom) # label(non_clause).  [assumption].
18 -(e2 = op(e1,e0) & e3 = op(op(e1,e0),e0)) # label(ax23) # label(axiom) # label(non_clause).  [assumption].
19 -(e3 = op(e1,e2) & e0 = op(op(e1,e2),e2)) # label(ax24) # label(axiom) # label(non_clause).  [assumption].
20 -(e3 = op(e2,e1) & e0 = op(op(e2,e1),e1)) # label(ax25) # label(axiom) # label(non_clause).  [assumption].
21 -(e3 = op(e0,e2) & e1 = op(op(e0,e2),e2)) # label(ax26) # label(axiom) # label(non_clause).  [assumption].
22 -(e3 = op(e2,e0) & e1 = op(op(e2,e0),e0)) # label(ax27) # label(axiom) # label(non_clause).  [assumption].
23 -(e3 = op(e0,e1) & e2 = op(op(e0,e1),e1)) # label(ax28) # label(axiom) # label(non_clause).  [assumption].
24 -(e3 = op(e1,e0) & e2 = op(op(e1,e0),e0)) # label(ax29) # label(axiom) # label(non_clause).  [assumption].
============================== end of process non-clausal formulas ===
============================== PROCESS INITIAL CLAUSES ===============
============================== PREDICATE ELIMINATION =================
============================== end predicate elimination =============
Auto_denials:  (non-Horn, no changes).
Term ordering decisions:
Function symbol KB weights:  e0=1. e1=1. e2=1. e3=1. op=1.
============================== end of process initial clauses ========
============================== CLAUSES FOR SEARCH ====================
============================== end of clauses for search =============
============================== SEARCH ================================
% Starting search at 0.02 seconds.
============================== PROOF =================================
% Proof 1 at 0.05 (+ 0.00) seconds.
% Length of proof is 63.
% Level of proof is 11.
% Maximum clause weight is 20.000.
% Given clauses 211.
10 -(e1 = op(e3,e0) & e2 = op(op(e3,e0),e0)) # label(ax15) # label(axiom) # label(non_clause).  [assumption].
24 -(e3 = op(e1,e0) & e2 = op(op(e1,e0),e0)) # label(ax29) # label(axiom) # label(non_clause).  [assumption].
27 op(e0,e2) = e0 | op(e0,e2) = e1 | op(e0,e2) = e2 | op(e0,e2) = e3 # label(ax1_AndRHS_AndRHS_AndLHS) # label(axiom).  [assumption].
29 op(e1,e0) = e0 | op(e1,e0) = e1 | op(e1,e0) = e2 | op(e1,e0) = e3 # label(ax1_AndRHS_AndRHS_AndRHS_AndRHS_AndLHS) # label(axiom).  [assumption].
46 op(e0,e0) = e2 | op(e1,e0) = e2 | op(e2,e0) = e2 | op(e3,e0) = e2 # label(ax2_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndLHS) # label(axiom).  [assumption].
55 op(e1,e0) = e3 | op(e1,e1) = e3 | op(e1,e2) = e3 | op(e1,e3) = e3 # label(ax2_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndLHS) # label(axiom).  [assumption].
67 op(e3,e0) = e1 | op(e3,e1) = e1 | op(e3,e2) = e1 | op(e3,e3) = e1 # label(ax2_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndLHS) # label(axiom).  [assumption].
73 op(e0,e0) != op(e1,e0) # label(ax3_AndLHS) # label(axiom).  [assumption].
74 op(e1,e0) != op(e0,e0).  [copy(73),flip(a)].
93 op(e1,e1) != op(e3,e1) # label(ax3_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndLHS) # label(axiom).  [assumption].
94 op(e3,e1) != op(e1,e1).  [copy(93),flip(a)].
97 op(e0,e2) != op(e1,e2) # label(ax3_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndLHS) # label(axiom).  [assumption].
98 op(e1,e2) != op(e0,e2).  [copy(97),flip(a)].
99 op(e0,e2) != op(e2,e2) # label(ax3_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndLHS) # label(axiom).  [assumption].
100 op(e2,e2) != op(e0,e2).  [copy(99),flip(a)].
101 op(e0,e2) != op(e3,e2) # label(ax3_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndLHS) # label(axiom).  [assumption].
102 op(e3,e2) != op(e0,e2).  [copy(101),flip(a)].
117 op(e1,e3) != op(e3,e3) # label(ax3_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndLHS) # label(axiom).  [assumption].
118 op(e3,e3) != op(e1,e3).  [copy(117),flip(a)].
123 op(e0,e0) != op(e0,e2) # label(ax3_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndLHS) # label(axiom).  [assumption].
124 op(e0,e2) != op(e0,e0).  [copy(123),flip(a)].
133 op(e1,e0) != op(e1,e1) # label(ax3_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndLHS) # label(axiom).  [assumption].
134 op(e1,e1) != op(e1,e0).  [copy(133),flip(a)].
147 op(e2,e0) != op(e2,e2) # label(ax3_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS_AndLHS) # label(axiom).  [assumption].
148 op(e2,e2) != op(e2,e0).  [copy(147),flip(a)].
171 e0 != e2 # label(ax4_AndRHS_AndLHS) # label(axiom).  [assumption].
172 e2 != e0.  [copy(171),flip(a)].
177 e1 != e3 # label(ax4_AndRHS_AndRHS_AndRHS_AndRHS_AndLHS) # label(axiom).  [assumption].
178 e3 != e1.  [copy(177),flip(a)].
179 e2 != e3 # label(ax4_AndRHS_AndRHS_AndRHS_AndRHS_AndRHS) # label(axiom).  [assumption].
180 e3 != e2.  [copy(179),flip(a)].
181 op(e0,e0) = e0 # label(ax5_AndLHS) # label(axiom).  [assumption].
182 op(e1,e1) = e1 # label(ax5_AndRHS_AndLHS) # label(axiom).  [assumption].
183 op(e2,e2) = e2 # label(ax5_AndRHS_AndRHS_AndLHS) # label(axiom).  [assumption].
184 op(e3,e3) = e3 # label(ax5_AndRHS_AndRHS_AndRHS) # label(axiom).  [assumption].
194 op(e3,e0) != e1 | op(op(e3,e0),e0) != e2 # label(ax15) # label(axiom).  [clausify(10)].
208 op(e1,e0) != e3 | op(op(e1,e0),e0) != e2 # label(ax29) # label(axiom).  [clausify(24)].
209 op(e1,e0) = c_0.  [new_symbol(74)].
211 op(e0,e2) != e0.  [back_rewrite(124),rewrite([181(6)])].
215 c_0 != e0.  [back_rewrite(74),rewrite([209(3),181(4)])].
218 c_0 = e2 | op(e2,e0) = e2 | op(e3,e0) = e2.  [back_rewrite(46),rewrite([181(3),209(6)]),flip(a),unit_del(a,172)].
224 c_0 != e1.  [back_rewrite(134),rewrite([182(3),209(4)]),flip(a)].
225 op(e3,e1) != e1.  [back_rewrite(94),rewrite([182(6)])].
229 c_0 = e3 | op(e1,e2) = e3 | op(e1,e3) = e3.  [back_rewrite(55),rewrite([209(3),182(6)]),flip(b),unit_del(b,178)].
236 op(e2,e0) != e2.  [back_rewrite(148),rewrite([183(3)]),flip(a)].
239 op(e0,e2) != e2.  [back_rewrite(100),rewrite([183(3)]),flip(a)].
250 op(e1,e3) != e3.  [back_rewrite(118),rewrite([184(3)]),flip(a)].
255 op(e3,e0) = e1 | op(e3,e2) = e1.  [back_rewrite(67),rewrite([184(18)]),unit_del(b,225),unit_del(d,178)].
258 c_0 != e3 | op(c_0,e0) != e2.  [back_rewrite(208),rewrite([209(3),209(6)])].
264 c_0 = e2 | c_0 = e3.  [back_rewrite(29),rewrite([209(3),209(6),209(9),209(12)]),unit_del(a,215),unit_del(b,224)].
266 op(e0,e2) = e1 | op(e0,e2) = e3.  [back_unit_del(27),unit_del(a,211),unit_del(c,239)].
278 c_0 = e2 | op(e3,e0) = e2.  [back_unit_del(218),unit_del(b,236)].
286 c_0 = e3 | op(e1,e2) = e3.  [back_unit_del(229),unit_del(c,250)].
322 c_0 = e2 | c_0 != e3 | op(e3,e0) != e2.  [para(264(b,1),258(b,1,1))].
382 c_0 = e3 | op(e0,e2) != e3.  [para(286(b,1),98(a,1)),flip(b)].
401 c_0 = e3 | op(e0,e2) = e1.  [resolve(382,b,266,b)].
418 c_0 = e3 | op(e3,e2) != e1.  [para(401(b,1),102(a,2))].
427 c_0 = e3 | op(e3,e0) = e1.  [resolve(418,b,255,b)].
433 c_0 = e3 | op(e3,e0) != e1 | c_0 != e2.  [para(427(b,1),194(b,1,1)),rewrite([209(11)])].
496 c_0 = e2 | c_0 != e3.  [resolve(322,c,278,b),merge(c)].
497 c_0 = e2.  [resolve(496,b,264,b),merge(b)].
503 op(e3,e0) != e1.  [back_rewrite(433),rewrite([497(1),497(9)]),flip(a),xx(c),unit_del(a,180)].
509 $F.  [back_rewrite(427),rewrite([497(1)]),flip(a),unit_del(a,180),unit_del(b,503)].
============================== end of proof ==========================
============================== STATISTICS ============================
Given=211. Generated=1388. Kept=430. proofs=1.
Usable=170. Sos=85. Demods=8. Limbo=12, Disabled=293. Hints=0.
Megabytes=0.36.
User_CPU=0.05, System_CPU=0.00, Wall_clock=0.
============================== end of statistics =====================
============================== end of search =========================
THEOREM PROVED
Exiting with 1 proof.
Process 8802 exit (max_proofs) Wed Jun 13 11:22:45 2012
Prover9 interrupted

%------------------------------------------------------------------------------
