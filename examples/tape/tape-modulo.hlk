define type nat;

define variable k, l, n, p, q, x, y of type nat;
define variable k_0, k_1, n_0, n_1 of type nat;
define constant 0, 1 of type nat;

define infix function + of type nat,nat to nat with weight 100;

define axiom :- k + l = l + k;
define axiom :- k + (l + n) = (k + l) + n;
define axiom k = k + (1 + l) :- ;
define axiom :- k = k;

define function f of type nat to nat;

define predicate A by all x ( f(x) = 0 or f(x) = 1 );

define predicate I by all n ex k f( n + k ) = x;

define proof the-proof
  proves
    A :- ex p ex q ( not p = q and f(p) = f(q) );

  with cut I(1)
    right by proof \epsilon(1);
  with cut I(0)
    left by proof \tau
    right by proof \epsilon(0);
;

define proof \tau
  proves
    A :- I(0), I(1);

  with undef I
    :- all n ex k f( n + k ) = 0, all n ex k f( n + k ) = 1;
  with all right
    :- ex k f( n_0 + k ) = 0, ex k f( n_1 + k ) = 1;
  with ex right
    :- f( n_0 + n_1 ) = 0, f( n_1 + n_0 ) = 1;
  with undef A
    all x ( f(x) = 0 or f(x) = 1 ) :- ;
  with all left
    f(n_0 + n_1) = 0 or f(n_0 + n_1) = 1 :- ;
  with or left
    f(n_0 + n_1) = 1 :-
    left auto propositional f(n_0 + n_1) = 0 :- f(n_0 + n_1) = 0;
  with paramod by n_0 + n_1 = n_1 + n_0
    right f( n_1 + n_0 ) = 1 :- ;
;

define proof \epsilon
  with meta term i of type nat;

  proves
    I(i) :- ex p ex q ( not p = q and f(p) = f(q) );

  with undef I
    all n ex k f( n + k ) = i :- ;
  with all left
    ex k f( n_0 + k ) = i :- ;
  with ex left
    f( n_0 + k_0 ) = i :- ;
  with all left
    ex k f( ((n_0 + k_0) + 1) + k ) = i :- ;
  with ex left
    f( ((n_0 + k_0) + 1) + k_1 ) = i :- ;
  with ex right
    :- not n_0 + k_0 = ((n_0 + k_0) + 1) + k_1 and
       f(n_0 + k_0) = f(((n_0 + k_0) + 1) + k_1);
  with and right
   left by proof \psi
   right by proof \eta(i);
;

define proof \psi
  proves
    :- not n_0 + k_0 = ((n_0 + k_0) + 1) + k_1;

  with not right
    n_0 + k_0 = ((n_0 + k_0) + 1) + k_1 :- ;
  with paramod by ( n_0 + k_0 ) + ( 1 + k_1 ) = ( ( n_0 + k_0 ) + 1 ) + k_1
    right n_0 + k_0 = ( n_0 + k_0 ) + ( 1 + k_1 ) :- ;
;

define proof \eta
  with meta term i of type nat;

  proves
    f( n_0 + k_0 ) = i, f( ((n_0 + k_0) + 1) + k_1 ) = i :-
       f(n_0 + k_0) = f(((n_0 + k_0) + 1) + k_1);

  with paramod by f( n_0 + k_0 ) = i
    right :- i = f( ((n_0 + k_0) + 1) + k_1 );
  with paramod by f( ((n_0 + k_0) + 1) + k_1 ) = i
    right :- i = i;
;

