### Basic properties of sets (of natural numbers) with some potential for re-use

reference defs.hlk;

################################
## the empty set

# the emptyset is a subset of every set
define proof emptysubsetall
  proves
    :- all X (\emptyset() \subseteq X) ;

  with all2 right
    :- \emptyset() \subseteq X'''_0 ;

  with undef \subseteq
    :- all x ( \emptyset()(x) impl X'''_0(x) ) ;

  with all right
    :- \emptyset()(x_0) impl X'''_0(x_0) ;

  with impl right
    \emptyset()(x_0) :- ;

  with undef \emptyset
    0 = 1 :- ;
;

# a set which differs from the emptyset has a member
define proof nonemptyhasmember
  proves
     :- all X ( X \neq \emptyset() impl ex x X(x) ) ;

  with all2 right
     :- X_0 \neq \emptyset() impl ex x X_0(x) ;

  with impl right
     X_0 \neq \emptyset() :- ex x X_0(x) ;

  with undef \neq
    not X_0 = \emptyset() :- ;

  with not left
    :- X_0 = \emptyset() ;

  with undef equality of type set
    :- X_0 \subseteq \emptyset() and \emptyset() \subseteq X_0 ;

  with cut all X (\emptyset() \subseteq X)
    left by proof emptysubsetall;

  with all2 left with X_0
    \emptyset() \subseteq X_0 :-;

  with and right
    :- X_0 \subseteq \emptyset()
    right auto propositional \emptyset() \subseteq X_0 :- \emptyset() \subseteq X_0 ;

  with undef \subseteq
    :- all x ( X_0(x) impl \emptyset()(x) );

  with all right
    :- X_0(x_0) impl \emptyset()(x_0);

  with ex right
    :- X_0(x_0);

  continued auto propositional  :- X_0(x_0) impl \emptyset()(x_0), X_0(x_0);
;

# a set which has a member differs from the empty set
define proof hasmembernonempty
  proves
    :- all X ( ex x X(x) impl X \neq \emptyset() ) ;

  with all2 right
    :- ex x X''_0(x) impl X''_0 \neq \emptyset() ;

  with impl right
    ex x X''_0(x) :- X''_0 \neq \emptyset() ;

  with ex left
    X''_0(y_0) :- ;

  with undef \neq
    :- not X''_0 = \emptyset() ;

  with not right
    X''_0 = \emptyset() :- ;

  with undef equality of type set
    X''_0 \subseteq \emptyset() and \emptyset() \subseteq X''_0 :- ;

  with and left
    X''_0 \subseteq \emptyset() :- ;

  with undef \subseteq
    all x ( X''_0(x) impl \emptyset()(x) ) :- ;
  
  with all left
    X''_0(y_0) impl \emptyset()(y_0) :- ;

  with impl left
    \emptyset()(y_0) :-
    left explicit axiom X''_0(y_0) :- X''_0(y_0) ;

  with undef \emptyset
    0 = 1 :-;

  explicit axiom 0 = 1 :-;
;

# the emptyset does not have a member
define proof emptyhasnomember
  proves
    :- not ex x \emptyset()(x) ;

  with not right
    ex x \emptyset()(x) :- ;

  with ex left
    \emptyset()(x_0) :- ;

  with undef \emptyset
    0 = 1 :- ;
;

################################
## the complement

# the complement of the complement of X is X
define proof complementinvolutive
  proves
    :- all X ( comp(comp(X)) = X) ;

  with all2 right
    :- comp(comp(X_0)) = X_0 ;

  with undef equality of type set
    :- comp(comp(X_0)) \subseteq X_0 and X_0 \subseteq comp(comp(X_0)) ;

  with and right
    :- comp(comp(X_0)) \subseteq X_0
    right by proof complementinvolutive_1 ;

  with undef \subseteq
    :- all x ( comp(comp(X_0))(x) impl X_0(x) ) ;

  with all right
    :- comp(comp(X_0))(x_0) impl X_0(x_0) ;

  with impl right
    comp(comp(X_0))(x_0) :- X_0(x_0) ;

  with undef comp
    not comp(X_0)(x_0) :- ;

  with not left
    :- comp(X_0)(x_0) ;

  with undef comp
    :- not X_0(x_0) ;

  with not right
    X_0(x_0) :- ;
;

define proof complementinvolutive_1
  proves
    :- X_0 \subseteq comp(comp(X_0)) ;

  with undef \subseteq
    :- all x ( X_0(x) impl comp(comp(X_0))(x) ) ;

  with all right
    :- X_0(x_0) impl comp(comp(X_0))(x_0) ;

  with impl right
    X_0(x_0) :- comp(comp(X_0))(x_0) ;

  with undef comp
    :- not comp(X_0)(x_0) ;

  with not right
    comp(X_0)(x_0) :- ;

  with undef comp
    not X_0(x_0) :- ;

  with not left
    :- X_0(x_0) ;
;

# if the complements of X and Y are equal then X and Y are equal
define proof complementinjective
  proves
    :- all X all Y ( comp(X) = comp(Y) impl X = Y ) ;

  with all2 right
    :- all Y ( comp(X_0) = comp(Y) impl X_0 = Y ) ;

  with all2 right
    :- comp(X_0) = comp(Y_0) impl X_0 = Y_0 ;

  with impl right
    comp(X_0) = comp(Y_0) :- X_0 = Y_0 ;

  with undef equality of type set
    comp(X_0) \subseteq comp(Y_0) and comp(Y_0) \subseteq comp(X_0) :- X_0 \subseteq Y_0 and Y_0 \subseteq X_0 ;

  with and left
    comp(X_0) \subseteq comp(Y_0), comp(Y_0) \subseteq comp(X_0) :- ;

  with and right
    :- Y_0 \subseteq X_0
    left by proof complementinjective_1 ;

  with undef \subseteq
    all x ( comp(X_0)(x) impl comp(Y_0)(x) ) :- all x ( Y_0(x) impl X_0(x) ) ;

  with all right
    :- Y_0(x_0) impl X_0(x_0) ;

  with impl right
    Y_0(x_0) :- X_0(x_0) ;

  with all left
    comp(X_0)(x_0) impl comp(Y_0)(x_0) :- ;

  with impl left
    :- comp(X_0)(x_0)
    right by proof complementinjective_2 ;

   with undef comp
    :- not X_0(x_0) ;

   with not right
    X_0(x_0) :- ;
;

define proof complementinjective_1
  proves
    comp(Y_0) \subseteq comp(X_0) :- X_0 \subseteq Y_0 ;

  with undef \subseteq
    all x ( comp(Y_0)(x) impl comp(X_0)(x) ) :- all x ( X_0(x) impl Y_0(x) ) ;

  with all right
    :- X_0(x_0) impl Y_0(x_0) ;

  with impl right
    X_0(x_0) :- Y_0(x_0) ;

  with all left
    comp(Y_0)(x_0) impl comp(X_0)(x_0) :- ;

  with impl left
    :- comp(Y_0)(x_0)
    right by proof complementinjective_3 ;

  with undef comp
    :- not Y_0(x_0) ;

  with not right
    Y_0(x_0) :- ;
;

define proof complementinjective_2
  proves
    Y_0(x_0), comp(Y_0)(x_0) :- ;

  with undef comp
    not Y_0(x_0) :- ;

  with not left
    :- Y_0(x_0) ;
;

define proof complementinjective_3
  proves
    X_0(x_0), comp(X_0)(x_0) :- ;

  with undef comp
    not X_0(x_0) :- ;

  with not left
    :- X_0(x_0) ;
;
 

################################
## subset

# if X \subseteq Y and Y \subset Z then X \subset Z
define proof subsettranseqprop
  proves
    :- all X all Y all Z ( X \subseteq Y impl ( Y \subset Z impl X \subset Z )) ;

  with all2 right
    :- X'_0 \subseteq Y_0 impl ( Y_0 \subset Z'''_0 impl X'_0 \subset Z'''_0 ) ;

  with impl right
    X'_0 \subseteq Y_0 :- Y_0 \subset Z'''_0 impl X'_0 \subset Z'''_0 ;

  with impl right
    Y_0 \subset Z'''_0 :- X'_0 \subset Z'''_0 ;

  with undef \subset
    Y_0 \subseteq Z'''_0 and not Y_0 = Z'''_0 :- X'_0 \subseteq Z'''_0 and not X'_0 = Z'''_0;

  with and left
    Y_0 \subseteq Z'''_0, not Y_0 = Z'''_0 :-;

  with and right
    :- X'_0 \subseteq Z'''_0
    right by proof subsettranseqprop_1 ;

  with undef \subseteq
    all x ( X'_0(x) impl Y_0(x) ), all x ( Y_0(x) impl Z'''_0(x) ) :- all x ( X'_0(x) impl Z'''_0(x) );

  with all right
    :- X'_0(x_0) impl Z'''_0(x_0);

  with all left 
    X'_0(x_0) impl Y_0(x_0), Y_0(x_0) impl Z'''_0(x_0) :-;

  continued auto propositional X'_0(x_0) impl Y_0(x_0), Y_0(x_0) impl Z'''_0(x_0) :- X'_0(x_0) impl Z'''_0(x_0);
;

define proof subsettranseqprop_1
  proves
    X'_0 \subseteq Y_0, Y_0 \subseteq Z'''_0, not Y_0 = Z'''_0 :- not X'_0 = Z'''_0 ;

  with not right
    X'_0 = Z'''_0 :- ;

  with not left
    :- Y_0 = Z'''_0 ;

  with undef equality of type set
    :- Y_0 \subseteq Z'''_0 and Z'''_0 \subseteq Y_0 ;

  with and right
    :- Z'''_0 \subseteq Y_0
    left auto propositional Y_0 \subseteq Z'''_0 :- Y_0 \subseteq Z'''_0 ;

  with undef equality of type set
    X'_0 \subseteq Z'''_0 and Z'''_0 \subseteq X'_0 :- ;

  with and left
    Z'''_0 \subseteq X'_0 :- ;

  with undef \subseteq
    all x ( Z'''_0(x) impl X'_0(x) ), all x ( X'_0(x) impl Y_0(x) ) :- all x ( Z'''_0(x) impl Y_0(x) ) ;

  with all right
    :- Z'''_0(x_0) impl Y_0(x_0) ;

  with all left
    Z'''_0(x_0) impl X'_0(x_0) , X'_0(x_0) impl Y_0(x_0) :- ;

  with impl right
    Z'''_0(x_0) :- Y_0(x_0) ;

  with impl left
    :- X'_0(x_0)
    left explicit axiom Z'''_0(x_0) :- Z'''_0(x_0) ;

  with impl left
    left explicit axiom X'_0(x_0) :- X'_0(x_0)
    right explicit axiom Y_0(x_0) :-  Y_0(x_0) ;
;

# if X is a subset of Y then Y^c is a subset of X^c
define proof subsetcomplement
  proves
    :- all X all Y ( X \subset Y impl comp(Y) \subset comp(X) ) ;

  with all2 right
    :- all Y ( X_0 \subset Y impl comp(Y) \subset comp(X_0) ) ;

  with all2 right
    :- X_0 \subset Y_0 impl comp(Y_0) \subset comp(X_0) ;

  with impl right
    X_0 \subset Y_0 :- comp(Y_0) \subset comp(X_0) ;

  with undef \subset
    X_0 \subseteq Y_0 and not X_0 = Y_0 :- comp(Y_0) \subseteq comp(X_0) and not comp(Y_0) = comp(X_0) ;

  with and left
    X_0 \subseteq Y_0, not X_0 = Y_0 :- ;

  with and right
    :- comp(Y_0) \subseteq comp(X_0)
    right by proof subsetcomplement_1 ;

  with undef \subseteq
    all x ( X_0(x) impl Y_0(x) ) :- all x ( comp(Y_0)(x) impl comp(X_0)(x) ) ;

  with all right
    :- comp(Y_0)(x_0) impl comp(X_0)(x_0) ;

  with impl right
    comp(Y_0)(x_0) :- comp(X_0)(x_0) ;

  with undef comp
    not Y_0(x_0) :- not X_0(x_0) ;

  with not left
    :- Y_0(x_0) ;

  with not right
    X_0(x_0) :- ;

  with all left
    X_0(x_0) impl Y_0(x_0) :- ;

  with impl left
    left explicit axiom X_0(x_0) :- X_0(x_0) 
    right explicit axiom Y_0(x_0) :- Y_0(x_0) ;
;

define proof subsetcomplement_1
  proves
    not X_0 = Y_0 :- not comp(Y_0) = comp(X_0) ;

  with not left
    :- X_0 = Y_0 ;

  with not right
    comp(Y_0) = comp(X_0) :- ;

  with undef equality of type set
    comp(Y_0) \subseteq comp(X_0) and comp(X_0) \subseteq comp(Y_0) :- X_0 \subseteq Y_0 and Y_0 \subseteq X_0 ;

  with and left
    comp(Y_0) \subseteq comp(X_0), comp(X_0) \subseteq comp(Y_0) :- ;

  with and right
    :- X_0 \subseteq Y_0
    right by proof subsetcomplement_2 ;

  with undef \subseteq
    all x ( comp(Y_0)(x) impl comp(X_0)(x) ) :- all x ( X_0(x) impl Y_0(x) ) ;

  with all right
    :- X_0(x_0) impl Y_0(x_0) ;

  with impl right
    X_0(x_0) :- Y_0(x_0) ;

  with all left
    comp(Y_0)(x_0) impl comp(X_0)(x_0) :- ;

  with impl left
    :- comp(Y_0)(x_0)
    right by proof subsetcomplement_3 ;

  with undef comp
    :- not Y_0(x_0) ;

  with not right
    Y_0(x_0) :- ;
;

define proof subsetcomplement_2
  proves
    comp(X_0) \subseteq comp(Y_0) :- Y_0 \subseteq X_0 ;

  with undef \subseteq
    all x ( comp(X_0)(x) impl comp(Y_0)(x) ) :- all x ( Y_0(x) impl X_0(x) ) ;

  with all right
    :- Y_0(x_0) impl X_0(x_0) ;

  with impl right
    Y_0(x_0) :- X_0(x_0) ;

  with all left
    comp(X_0)(x_0) impl comp(Y_0)(x_0) :- ;

  with impl left
    :- comp(X_0)(x_0)
    right by proof subsetcomplement_4 ;
 
  with undef comp
    :- not X_0(x_0) ;

  with not right
    X_0(x_0) :- ;
;

define proof subsetcomplement_3
  proves
    comp(X_0)(x_0), X_0(x_0) :- ;

  with undef comp
    not X_0(x_0) :- ;

  with not left
    :- X_0(x_0) ;
;

define proof subsetcomplement_4
  proves
    comp(Y_0)(x_0), Y_0(x_0) :- ;

  with undef comp
    not Y_0(x_0) :- ;

  with not left
    :- Y_0(x_0) ;
;


# if X is a proper subset of Y then there is an element in Y \setminus X
define proof subsetdiffelement
  proves
    :- all X all Y ( X \subset Y impl ex x \setminus(Y,X)(x) ) ;

  with all2 right
    :- X''_0 \subset Y''_0 impl ex x \setminus(Y''_0,X''_0)(x) ;

  with impl right
    X''_0 \subset Y''_0 :- ex x \setminus(Y''_0,X''_0)(x) ;

  with undef \subset
    X''_0 \subseteq Y''_0 and not X''_0 = Y''_0 :- ;

  with and left
    X''_0 \subseteq Y''_0, not X''_0 = Y''_0 :- ;

  with not left
    :- X''_0 = Y''_0 ;

  with undef equality of type set
    :- X''_0 \subseteq Y''_0 and Y''_0 \subseteq X''_0 ;

  with and right
    :- Y''_0 \subseteq X''_0
    left auto propositional X''_0 \subseteq Y''_0 :- X''_0 \subseteq Y''_0 ;

  with undef \subseteq
    :- all x ( Y''_0(x) impl X''_0(x) ) ;

  with all right
    :- Y''_0(p_0) impl X''_0(p_0) ;

  with impl right
    Y''_0(p_0) :- X''_0(p_0) ;

  with ex right
    :- \setminus(Y''_0,X''_0)(p_0) ;

  with undef \setminus
    :- Y''_0(p_0) and comp(X''_0)(p_0) ;

  with and right
    :- comp(X''_0)(p_0)
    left explicit axiom Y''_0(p_0) :- Y''_0(p_0) ;

  with undef comp
    :- not X''_0(p_0) ;

  with not right
    X''_0(p_0) :- ;

  explicit axiom X''_0(p_0) :- X''_0(p_0) ;
;

# if Y \subseteq Z \subseteq X then X\setminus Z is a subset of X\setminus Y
define proof subseteqminus
  proves
    :- all X all Y all Z ( Y \subseteq Z impl \setminus(X,Z) \subseteq \setminus(X,Y) ) ;

  with all2 right
    :- all Y all Z ( Y \subseteq Z impl \setminus(X''_0,Z) \subseteq \setminus(X''_0,Y) ) ;

  with all2 right
    :- all Z ( Y''_0 \subseteq Z impl \setminus(X''_0,Z) \subseteq \setminus(X''_0,Y''_0) ) ;

  with all2 right
    :- Y''_0 \subseteq Z''''_0 impl \setminus(X''_0,Z''''_0) \subseteq \setminus(X''_0,Y''_0) ;

  with impl right
    Y''_0 \subseteq Z''''_0 :- \setminus(X''_0,Z''''_0) \subseteq \setminus(X''_0,Y''_0) ;

  with undef \subseteq
    :- all x ( \setminus(X''_0,Z''''_0)(x) impl \setminus(X''_0,Y''_0)(x) ) ;

  with all right
    :- \setminus(X''_0,Z''''_0)(x_0) impl \setminus(X''_0,Y''_0)(x_0) ;

  with impl right
    \setminus(X''_0,Z''''_0)(x_0) :- \setminus(X''_0,Y''_0)(x_0) ;

  with undef \setminus
    X''_0(x_0) and comp(Z''''_0)(x_0) :- X''_0(x_0) and comp(Y''_0)(x_0) ;

  with and left
    X''_0(x_0), comp(Z''''_0)(x_0) :- ;

  with and right
    :- comp(Y''_0)(x_0)
    left explicit axiom X''_0(x_0) :- X''_0(x_0) ;

  with undef comp
    not Z''''_0(x_0) :- not Y''_0(x_0) ;

  with not left
    :- Z''''_0(x_0) ;

  with not right
    Y''_0(x_0) :- ;

  with undef \subseteq
    all x ( Y''_0(x) impl Z''''_0(x) ) :- ;

  with all left
    Y''_0(x_0) impl Z''''_0(x_0) :- ;

  with impl left
    left explicit axiom Y''_0(x_0) :- Y''_0(x_0)
    right explicit axiom Z''''_0(x_0) :- Z''''_0(x_0) ;
;


# if Y \subset Z \subseteq X then X\setminus Z is a subset of X\setminus Y
define proof subsetminus
  proves
    :- all X all Y all Z ( Y \subset Z impl ( Z \subseteq X impl \setminus(X,Z) \subset \setminus(X,Y) ) ) ;

  with all2 right
    :- all Y all Z ( Y \subset Z impl ( Z \subseteq X'_0 impl \setminus(X'_0,Z) \subset \setminus(X'_0,Y) ) ) ;

  with all2 right
    :- all Z ( Y_0 \subset Z impl ( Z \subseteq X'_0 impl \setminus(X'_0,Z) \subset \setminus(X'_0,Y_0) ) ) ;

  with all2 right
    :- Y'_0 \subset Z'''_0 impl ( Z'''_0 \subseteq X'_0 impl \setminus(X'_0,Z'''_0) \subset \setminus(X'_0,Y'_0) ) ;

  with impl right
    Y'_0 \subset Z'''_0 :- Z'''_0 \subseteq X'_0 impl \setminus(X'_0,Z'''_0) \subset \setminus(X'_0,Y'_0) ;

  with impl right
    Z'''_0 \subseteq X'_0 :- \setminus(X'_0,Z'''_0) \subset \setminus(X'_0,Y'_0) ;

  with undef \subset
    :- \setminus(X'_0,Z'''_0) \subseteq \setminus(X'_0,Y'_0) and not \setminus(X'_0,Z'''_0) = \setminus(X'_0,Y'_0) ;

  with cut all X all Y all Z ( Y \subseteq Z impl \setminus(X,Z) \subseteq \setminus(X,Y) )
    left by proof subseteqminus ;

  with all2 left with X'_0
    all Y all Z ( Y \subseteq Z impl \setminus(X'_0,Z) \subseteq \setminus(X'_0,Y) ) :- ;

  with all2 left with Y'_0
    all Z ( Y'_0 \subseteq Z impl \setminus(X'_0,Z) \subseteq \setminus(X'_0,Y'_0) ) :- ;

  with all2 left with Z'''_0
    Y'_0 \subseteq Z'''_0 impl \setminus(X'_0,Z'''_0) \subseteq \setminus(X'_0,Y'_0) :- ;

  with impl left
    \setminus(X'_0,Z'''_0) \subseteq \setminus(X'_0,Y'_0) :-
    left by proof subsetminus_3 ;

  with and right
    :- not \setminus(X'_0,Z'''_0) = \setminus(X'_0,Y'_0)
    left auto propositional \setminus(X'_0,Z'''_0) \subseteq \setminus(X'_0,Y'_0) :- \setminus(X'_0,Z'''_0) \subseteq \setminus(X'_0,Y'_0) ;
  
  with cut all X all Y ( X \subset Y impl ex x \setminus(Y,X)(x) )
    left by proof subsetdiffelement ;

  with all2 left with Y'_0
    all Y ( Y'_0 \subset Y impl ex x \setminus(Y,Y'_0)(x) ) :- ;

  with all2 left with Z'''_0
    Y'_0 \subset Z'''_0 impl ex x \setminus(Z'''_0,Y'_0)(x) :- ;

  with impl left
    ex x \setminus(Z'''_0,Y'_0)(x) :-
    left auto propositional Y'_0 \subset Z'''_0 :- Y'_0 \subset Z'''_0 ;

  with ex left
    \setminus(Z'''_0,Y'_0)(z_0) :- ;

  with undef \setminus
    Z'''_0(z_0) and comp(Y'_0)(z_0) :- ;

  with and left
    Z'''_0(z_0), comp(Y'_0)(z_0) :- ;

  with undef \subseteq
    all x ( Z'''_0(x) impl X'_0(x) ) :- ;

  with all left
    Z'''_0(z_0) impl X'_0(z_0) :- ;

  with impl left
    X'_0(z_0) :-
    left explicit axiom Z'''_0(z_0) :- Z'''_0(z_0) ;

  with cut \setminus(X'_0,Y'_0)(z_0)
    left by proof subsetminus_1 ;

  with cut not \setminus(X'_0,Z'''_0)(z_0)
    left by proof subsetminus_2 ;

  with not left
    :- \setminus(X'_0,Z'''_0)(z_0) ;

  with not right
    \setminus(X'_0,Z'''_0) = \setminus(X'_0,Y'_0) :- ;

  with undef equality of type set
    \setminus(X'_0,Z'''_0) \subseteq \setminus(X'_0,Y'_0) and \setminus(X'_0,Y'_0) \subseteq \setminus(X'_0,Z'''_0) :- ;

  with and left
    \setminus(X'_0,Y'_0) \subseteq \setminus(X'_0,Z'''_0) :- ;

  with undef \subseteq
    all x ( \setminus(X'_0,Y'_0)(x) impl \setminus(X'_0,Z'''_0)(x) ) :- ;

  with all left
    \setminus(X'_0,Y'_0)(z_0) impl \setminus(X'_0,Z'''_0)(z_0) :- ;

  with impl left
    left auto propositional \setminus(X'_0,Y'_0)(z_0) :- \setminus(X'_0,Y'_0)(z_0)
    right auto propositional \setminus(X'_0,Z'''_0)(z_0) :- \setminus(X'_0,Z'''_0)(z_0) ;
;

define proof subsetminus_1
  proves
    X'_0(z_0), comp(Y'_0)(z_0) :- \setminus(X'_0,Y'_0)(z_0) ;

  with undef \setminus
    :- X'_0(z_0) and comp(Y'_0)(z_0) ;

  with and right
    left explicit axiom X'_0(z_0) :- X'_0(z_0)
    right auto propositional comp(Y'_0)(z_0) :- comp(Y'_0)(z_0) ;
;

define proof subsetminus_2
  proves
    Z'''_0(z_0) :- not \setminus(X'_0,Z'''_0)(z_0) ;

  with not right
    \setminus(X'_0,Z'''_0)(z_0) :- ;

  with undef \setminus
    X'_0(z_0) and comp(Z'''_0)(z_0) :- ;

  with and left
    comp(Z'''_0)(z_0) :- ;

  with undef comp
    not Z'''_0(z_0) :- ;

  with not left
    :- Z'''_0(z_0) ;
;

define proof subsetminus_3
  proves
   Y'_0 \subset Z'''_0 :- Y'_0 \subseteq Z'''_0 ;

  with undef \subset
    Y'_0 \subseteq Z'''_0 and not Y'_0 = Z'''_0 :- ;

  with and left
    Y'_0 \subseteq Z'''_0 :- ;
;

# subseteq commutation: finite X is in {0,...,max(X)}
define proof subsetinterval
  proves
    MAX_1 :- all X ( FIN(X) impl X \subseteq interval( 0, max(X) ) ) ;

  with all2 right
    :- FIN(X'_0) impl X'_0 \subseteq interval( 0, max(X'_0) ) ;

  with impl right
    FIN(X'_0) :- X'_0 \subseteq interval( 0, max(X'_0) ) ;

  with undef \subseteq
    :- all x ( X'_0(x) impl interval( 0, max(X'_0) )(x) ) ;

  with all right
    :- X'_0(x_0) impl interval( 0, max(X'_0) )(x_0) ;

  with impl right
    X'_0(x_0) :- interval( 0, max(X'_0) )(x_0) ;

  with undef interval
    :- x_0 \geq 0 and max(X'_0) \geq x_0 ;

  with and right
    :- max(X'_0) \geq x_0
    left explicit axiom :- x_0 \geq 0 ;

  with undef MAX_1
    all X (FIN(X) impl all n ( X(n) impl max(X) \geq n ) ) :- ;

  with all2 left with X'_0
    FIN(X'_0) impl all n ( X'_0(n) impl max(X'_0) \geq n ) :- ;

  with impl left
    all n ( X'_0(n) impl max(X'_0) \geq n ) :-
    left auto propositional FIN(X'_0) :- FIN(X'_0) ;

  with all left
    X'_0(x_0) impl max(X'_0) \geq x_0 :- ;

  with impl left
    left explicit axiom X'_0(x_0) :- X'_0(x_0)
    right explicit axiom max(X'_0) \geq x_0 :- max(X'_0) \geq x_0 ;
;

# subseteq commutation with intersection
define proof subsetintersection
  proves
    :- all X all Y all Z ( X \subseteq Y impl ( X \subseteq Z impl X \subseteq \cap(Y,Z) ) ) ;

  with all2 right
    :- all Y all Z ( X'_0 \subseteq Y impl ( X'_0 \subseteq Z impl X'_0 \subseteq \cap(Y,Z) ) ) ;

  with all2 right
    :- all Z ( X'_0 \subseteq Y_0 impl ( X'_0 \subseteq Z impl X'_0 \subseteq \cap(Y_0,Z) ) ) ;

  with all2 right
    :- X'_0 \subseteq Y_0 impl ( X'_0 \subseteq Z'''_0 impl X'_0 \subseteq \cap(Y_0,Z'''_0) ) ;

  with impl right
    X'_0 \subseteq Y_0 :- X'_0 \subseteq Z'''_0 impl X'_0 \subseteq \cap(Y_0,Z'''_0) ;

  with impl right
    X'_0 \subseteq Z'''_0 :- X'_0 \subseteq \cap(Y_0,Z'''_0) ;

  with undef \subseteq
    all x ( X'_0(x) impl Y_0(x) ), all x ( X'_0(x) impl Z'''_0(x) ) :- all x ( X'_0(x) impl \cap(Y_0,Z'''_0)(x) ) ;

  with all right
    :- X'_0(x_0) impl \cap(Y_0,Z'''_0)(x_0) ;

  with all left
    X'_0(x_0) impl Y_0(x_0), X'_0(x_0) impl Z'''_0(x_0) :- ;

  with impl right
    X'_0(x_0) :- \cap(Y_0,Z'''_0)(x_0) ;

  with impl left
    Y_0(x_0) :-
    left explicit axiom X'_0(x_0) :- X'_0(x_0) ;

  with impl left
    Z'''_0(x_0) :-
    left explicit axiom X'_0(x_0) :- X'_0(x_0) ;

  with undef \cap
    :- Y_0(x_0) and Z'''_0(x_0) ;

  with and right
    left explicit axiom Y_0(x_0) :- Y_0(x_0)
    right explicit axiom Z'''_0(x_0) :- Z'''_0(x_0) ;
;

################################
## finiteness

# the empty set is finite
define proof emptyset-finite
  proves :- FIN( \emptyset() );

  with undef FIN
    :- ex n all m ( \emptyset()(m) impl m < n );
  
  with ex right
    :- all m ( \emptyset()(m) impl m < 0 );

  with all right
    :- \emptyset()(\alpha) impl \alpha < 0;

  with impl right
    \emptyset()(\alpha) :- \alpha < 0;

  with undef \emptyset
    0 = 1 :- ;

  explicit axiom 0 = 1 :-;
;

# a singleton set is finite
define proof singletonfinite
  proves
    :- all x FIN( singleton(x) ) ;

  with all right
    :- FIN( singleton(x_0) ) ;

  with undef FIN
    :- ex n all m ( singleton(x_0)(m) impl m < n ) ;

  with ex right
    :- all m ( singleton(x_0)(m) impl m < x_0 + 1 ) ;

  with all right
    :- singleton(x_0)(z_0) impl z_0 < x_0 + 1 ;

  with impl right
    singleton(x_0)(z_0) :- z_0 < x_0 + 1 ;

  with undef singleton
    z_0 = x_0 :- ;

  with paramod by z_0 = x_0
    right :- x_0 < x_0 + 1 ;

  with undef <
    :- not x_0 \geq x_0 + 1 ;

  with not right
    x_0 \geq x_0 + 1 :- ;
;

# all (closed) intervals (of natural numbers) are finite
define proof intervalfinite
  proves :- all x all y FIN( interval( x, y ) ) ;

  with all right
    :- FIN( interval( x_0, y_0 ) ) ;

  with undef FIN
    :- ex n all m ( interval(x_0,y_0)(m) impl m < n ) ;

  with ex right
    :- all m ( interval(x_0,y_0)(m) impl m < y_0 + 1 ) ;

  with all right
    :- interval(x_0,y_0)(p_0) impl p_0 < y_0 + 1 ;

  with impl right
    interval(x_0,y_0)(p_0) :- p_0 < y_0 + 1 ;

  with undef interval
    p_0 \geq x_0 and y_0 \geq p_0 :- ;

  with and left
    y_0 \geq p_0 :- ;

  with undef <
    :- not p_0 \geq y_0 + 1 ;

  with not right
    p_0 \geq y_0 + 1 :- ;

  explicit axiom
    y_0 \geq p_0, p_0 \geq y_0 + 1 :- ;
;

# the intersection with at least one finite set is finite
define proof intersectionfinite
  proves :- all X all Y ( FIN(Y) impl FIN( \cap(X,Y) ) ) ;

  with all2 right
    :- all Y ( FIN(Y) impl FIN( \cap(X''_0,Y) ) ) ;

  with all2 right
    :- FIN(Y_0) impl FIN( \cap(X''_0,Y_0) ) ;

  with impl right
     FIN(Y_0) :- FIN( \cap(X''_0,Y_0) ) ;

  with undef FIN
    ex n all m ( Y_0(m) impl m < n ) :- ;

  with ex left
    all m ( Y_0(m) impl m < y_0 ) :- ;

  with undef FIN
    :- ex n all m ( \cap(X''_0,Y_0)(m) impl m < n ) ;

  with ex right
    :- all m ( \cap(X''_0,Y_0)(m) impl m < y_0 ) ;

  with all right
    :- \cap(X''_0,Y_0)(p_0) impl p_0 < y_0 ;

  with impl right
    \cap(X''_0,Y_0)(p_0) :- p_0 < y_0 ;

  with undef \cap
    X''_0(p_0) and Y_0(p_0) :- ;

  with and left
    Y_0(p_0) :- ;

  with all left
    Y_0(p_0) impl p_0 < y_0 :- ;

  with impl left
    left explicit axiom Y_0(p_0) :- Y_0(p_0)
    right auto propositional p_0 < y_0 :- p_0 < y_0 ;
;

# the set difference X \ Y is finite if X is
define proof setminusfinite
  proves
    :- all X all Y ( FIN(X) impl FIN( \setminus( X, Y ) ) ) ;

  with all2 right
    :- FIN(X''_0) impl FIN( \setminus( X''_0, Y_0 ) ) ;

  with impl right
    FIN(X''_0) :- FIN( \setminus( X''_0, Y_0 ) ) ;

  with undef FIN
    ex n all m ( X''_0(m) impl m < n ) :- ;

  with ex left
    all m ( X''_0(m) impl m < x_0 ) :- ;

  with undef FIN
    :- ex n all m ( \setminus( X''_0, Y_0 )(m) impl m < n ) ;

  with ex right
    :- all m ( \setminus( X''_0, Y_0 )(m) impl m < x_0 ) ;

  with all right
    :- \setminus( X''_0, Y_0 )(p_0) impl p_0 < x_0 ;

  with impl right
    \setminus( X''_0, Y_0 )(p_0) :- p_0 < x_0 ;

  with undef \setminus
    X''_0(p_0) and comp(Y_0)(p_0) :- ;

  with and left
    X''_0(p_0) :- ;

  with all left
    X''_0(p_0) impl p_0 < x_0 :- ;

  with impl left
    left auto propositional X''_0(p_0) :- X''_0(p_0)
    right auto propositional p_0 < x_0 :- p_0 < x_0 ;
;

# if Z is finite then so is H(X,Z)
define proof Hfinite
  proves
    :- all X all Z ( FIN(Z) impl FIN(H(X,Z)) ) ;

  with all2 right
    :- all Z ( FIN(Z) impl FIN(H(X'_0,Z)) ) ;

  with all2 right
    :- FIN(Z'''_0) impl FIN(H(X'_0,Z'''_0)) ;

  with impl right
    FIN(Z'''_0) :- FIN(H(X'_0,Z'''_0)) ;

  with cut all x all y FIN( interval( x, y ) )
    left by proof intervalfinite ;

  with all left
    FIN( interval( 0, max(Z'''_0) ) ) :- ;

  with cut all X all Y ( FIN(Y) impl FIN( \cap(X,Y) ) )
    left by proof intersectionfinite ;

  with all2 left with X'_0
    all Y ( FIN(Y) impl FIN( \cap(X'_0,Y) ) ) :- ;

  with all2 left with interval( 0, max(Z'''_0) )
    FIN(interval(0, max(Z'''_0))) impl FIN( \cap(X'_0,interval(0, max(Z'''_0))) ) :- ;

  with impl left
    FIN( \cap(X'_0,interval(0, max(Z'''_0))) ) :-
    left auto propositional FIN(interval(0, max(Z'''_0))) :- FIN(interval(0, max(Z'''_0))) ;
  
  with cut all X all Y ( FIN(X) impl FIN( \setminus( X, Y ) ) )
    left by proof setminusfinite ;

  with all2 left with \cap(X'_0,interval(0, max(Z'''_0)))
    all Y ( FIN( \cap(X'_0,interval(0, max(Z'''_0))) ) impl FIN( \setminus( \cap(X'_0,interval(0, max(Z'''_0))) , Y ) ) ) :- ;

  with all2 left with Z'''_0
    FIN( \cap(X'_0,interval(0, max(Z'''_0))) ) impl FIN( \setminus( \cap(X'_0,interval(0, max(Z'''_0))) , Z'''_0 ) ) :- ;

  with impl left
    FIN( \setminus( \cap(X'_0,interval(0, max(Z'''_0))) , Z'''_0 ) ) :-
    left auto propositional FIN( \cap(X'_0,interval(0, max(Z'''_0))) ) :- FIN( \cap(X'_0,interval(0, max(Z'''_0))) ) ;

  with undef FIN
    ex n all m ( \setminus( \cap(X'_0,interval(0, max(Z'''_0))) , Z'''_0 )(m) impl m < n ) :-  ;

  with undef FIN
    :- ex n all m ( H(X'_0,Z'''_0)(m) impl m < n ) ;

  with ex left
    all m ( \setminus( \cap(X'_0,interval(0, max(Z'''_0))) , Z'''_0 )(m) impl m < p_0 ) :-  ;

  with ex right
    :- all m ( H(X'_0,Z'''_0)(m) impl m < p_0 ) ;
  
  with all right
    :- H(X'_0,Z'''_0)(q_0) impl q_0 < p_0 ;

  with all left
    \setminus( \cap(X'_0,interval(0, max(Z'''_0))) , Z'''_0 )(q_0) impl q_0 < p_0 :-  ;

  with impl right
    H(X'_0,Z'''_0)(q_0) :- q_0 < p_0 ;

  with impl left
    \setminus( \cap(X'_0,interval(0, max(Z'''_0))) , Z'''_0 )(q_0) :-
    right auto propositional q_0 < p_0 :- q_0 < p_0 ;

  with undef H
    \setminus( \cap(X'_0,interval(0,max(Z'''_0))), Z'''_0)(q_0) :- ;
;

# if X is a subset of Y and Y is finite then X is finite
define proof subsetfinite
  proves
    :- all X all Y ( X \subseteq Y impl ( FIN(Y) impl FIN(X) ) ) ;

  with all2 right
    :- all Y ( X''_0 \subseteq Y impl ( FIN(Y) impl FIN(X''_0) ) ) ;

  with all2 right
    :- X'''_0 \subseteq Y'_0 impl ( FIN(Y'_0) impl FIN(X'''_0) ) ;

  with impl right
    X'''_0 \subseteq Y'_0 :- FIN(Y'_0) impl FIN(X'''_0) ;

  with impl right
    FIN(Y'_0) :- FIN(X'''_0) ;

  with undef FIN
    ex n all m ( Y'_0(m) impl m < n ) :- ;

  with ex left
    all m ( Y'_0(m) impl m < p_0 ) :- ;

  with undef FIN
    :- ex n all m ( X'''_0(m) impl m < n ) ;

  with ex right
    :- all m ( X'''_0(m) impl m < p_0 ) ;

  with all right
    :- X'''_0(q_0) impl q_0 < p_0 ;

  with impl right
    X'''_0(q_0) :- q_0 < p_0 ;

  with all left
    Y'_0(q_0) impl q_0 < p_0 :- ;

  with undef \subseteq
    all x ( X'''_0(x) impl Y'_0(x) ) :- ;

  with all left
    X'''_0(q_0) impl Y'_0(q_0) :- ;

  with impl left
    Y'_0(q_0) :-
    left explicit axiom X'''_0(q_0) :- X'''_0(q_0) ;
  
  with impl left
    left explicit axiom Y'_0(q_0) :- Y'_0(q_0)
    right auto propositional q_0 < p_0 :- q_0 < p_0 ;
;

################################
## maxima
 
# if X is a subset of Y (and both are non-empty and finite) then the maximum of X is less than or equal than the maximum of Y
define proof subsetmax
  proves
    MAX_0, MAX_1 :- all X all Y ( X \neq \emptyset() impl ( FIN(Y) impl ( X \subseteq Y impl max(Y) \geq max(X) ) ) ) ;

  with all2 right
    :- all Y ( X'_0 \neq \emptyset() impl ( FIN(Y) impl ( X'_0 \subseteq Y impl max(Y) \geq max(X'_0) ) ) ) ;

  with all2 right
    :- X'_0 \neq \emptyset() impl ( FIN(Y_0) impl ( X'_0 \subseteq Y_0 impl max(Y_0) \geq max(X'_0) ) ) ;

  with impl right
    X'_0 \neq \emptyset() :- ( FIN(Y_0) impl ( X'_0 \subseteq Y_0 impl max(Y_0) \geq max(X'_0) ) ) ;

  with impl right
    FIN(Y_0) :- X'_0 \subseteq Y_0 impl max(Y_0) \geq max(X'_0) ;
 
  with impl right
    X'_0 \subseteq Y_0 :- max(Y_0) \geq max(X'_0) ;

  with cut all X all Y ( X \subseteq Y impl ( FIN(Y) impl FIN(X) ) )
    left by proof subsetfinite ;

  with all2 left with X'_0
    all Y ( X'_0 \subseteq Y impl ( FIN(Y) impl FIN(X'_0) ) ) :- ;

  with all2 left with Y_0
    X'_0 \subseteq Y_0 impl ( FIN(Y_0) impl FIN(X'_0) ) :- ;

  with impl left
    FIN(Y_0) impl FIN(X'_0) :-
    left auto propositional X'_0 \subseteq Y_0 :- X'_0 \subseteq Y_0 ;

  with impl left
    FIN(X'_0) :-
    left auto propositional FIN(Y_0) :- FIN(Y_0) ;

  with undef MAX_0
    all X ( X \neq \emptyset() impl ( FIN(X) impl X(max(X)) ) ) :- ;

  with all2 left with X'_0
    X'_0 \neq \emptyset() impl ( FIN(X'_0) impl X'_0(max(X'_0)) ) :- ;

  with impl left
    :- FIN(X'_0) impl X'_0(max(X'_0))
    left auto propositional X'_0 \neq \emptyset() :- X'_0 \neq \emptyset() ;

  with impl left
    X'_0(max(X'_0)) :-
    left auto propositional FIN(X'_0) :- FIN(X'_0) ;
    
  with undef \subseteq
    all x ( X'_0(x) impl Y_0(x) ) :- ;

  with all left
    X'_0(max(X'_0)) impl Y_0(max(X'_0)) :- ;

  with impl left
    Y_0(max(X'_0)) :-
    left explicit axiom X'_0(max(X'_0)) :- X'_0(max(X'_0)) ;

  with undef MAX_1
    all X (FIN(X) impl all n ( X(n) impl max(X) \geq n ) ) :- ;

  with all2 left with Y_0
    FIN(Y_0) impl all n ( Y_0(n) impl max(Y_0) \geq n ) :- ;

  with impl left
    all n ( Y_0(n) impl max(Y_0) \geq n ) :-
    left auto propositional FIN(Y_0) :- FIN(Y_0) ;

  with all left
    Y_0(max(X'_0)) impl max(Y_0) \geq max(X'_0) :- ;

  with impl left
    left explicit axiom Y_0(max(X'_0)) :- Y_0(max(X'_0))
    right explicit axiom max(Y_0) \geq max(X'_0) :- max(Y_0) \geq max(X'_0) ;
;

################################
## setminus

define proof setminusnonempty
  proves
    :- all X all Y ( \setminus(X,Y) \neq \emptyset() impl X \neq \emptyset() ) ;

  with all2 right
    :- all Y ( \setminus(X''_0,Y) \neq \emptyset() impl X''_0 \neq \emptyset() ) ;

  with all2 right
    :- \setminus(X''_0,Y_0) \neq \emptyset() impl X''_0 \neq \emptyset() ;

  with impl right
    \setminus(X''_0,Y_0) \neq \emptyset() :- X''_0 \neq \emptyset() ;

  with undef \neq
    not \setminus(X''_0,Y_0) = \emptyset() :- not X''_0 = \emptyset() ;

  with not left
    :- \setminus(X''_0,Y_0) = \emptyset() ;

  with not right
    X''_0 = \emptyset() :- ;

  with undef equality of type set
    X''_0 \subseteq \emptyset() and \emptyset() \subseteq X''_0 :- \setminus(X''_0,Y_0) \subseteq \emptyset() and \emptyset() \subseteq \setminus(X''_0,Y_0) ;

  with cut all X (\emptyset() \subseteq X)
    left by proof emptysubsetall ;

  with all2 left with \setminus(X''_0,Y_0)
    \emptyset() \subseteq \setminus(X''_0,Y_0) :- ;

  with and right
    :- \setminus(X''_0,Y_0) \subseteq \emptyset()
    right auto propositional \emptyset() \subseteq \setminus(X''_0,Y_0) :- \emptyset() \subseteq \setminus(X''_0,Y_0) ;

  with and left
    X''_0 \subseteq \emptyset() :- ;

  with undef \subseteq
    all x ( X''_0(x) impl \emptyset()(x) ) :- all x ( \setminus(X''_0,Y_0)(x) impl \emptyset()(x) ) ;

  with all right
    :- \setminus(X''_0,Y_0)(x_0) impl \emptyset()(x_0) ;

  with impl right
    \setminus(X''_0,Y_0)(x_0) :- \emptyset()(x_0) ;

  with undef \setminus
    X''_0(x_0) and comp(Y_0)(x_0) :- ;

  with and left
    X''_0(x_0) :- ;

  with all left
    X''_0(x_0) impl \emptyset()(x_0) :- ;

  with impl left
    \emptyset()(x_0) :-
    left explicit axiom X''_0(x_0) :- X''_0(x_0) ;

  with undef \emptyset
    0 = 1 :- ;
;

# if the set differences X \ Y is empty then X is a subset of Y
define proof setdiffemptysubset
  proves
    :- all X all Y ( \setminus(X,Y) = \emptyset() impl X \subseteq Y ) ;

  with all2 right
    :- \setminus(X''_0,Y_0) = \emptyset() impl X''_0 \subseteq Y_0 ;

  with impl right
    \setminus(X''_0,Y_0) = \emptyset() :- X''_0 \subseteq Y_0 ;

  with cut not ex x \emptyset()(x)
    left by proof emptyhasnomember ;

  with paramod by \setminus(X''_0,Y_0) = \emptyset()
    right not ex x \setminus(X''_0,Y_0)(x) :- ;

  with undef \subseteq
    :- all x ( X''_0(x) impl Y_0(x) ) ;

  with all right
    :-  X''_0(q_0) impl Y_0(q_0) ;

  with impl right
    X''_0(q_0) :- Y_0(q_0) ;

  with not left
    :- ex x \setminus(X''_0,Y_0)(x) ;

  with ex right
    :- \setminus(X''_0,Y_0)(q_0) ;

  with undef \setminus
    :- X''_0(q_0) and comp(Y_0)(q_0) ;

  with and right
    :- comp(Y_0)(q_0)
    left explicit axiom X''_0(q_0) :- X''_0(q_0) ;

  with undef comp
    :- not Y_0(q_0) ;

  with not right
    Y_0(q_0) :- ;

  explicit axiom Y_0(q_0) :- Y_0(q_0) ;
;

