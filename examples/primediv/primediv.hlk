define type nat;

define constant 1 of type nat;

define infix function * of type nat,nat to nat with weight 100;
define infix atom predicate < of type nat,nat;
define infix atom predicate > of type nat,nat;
define atom variable predicate X,X_0 of type nat;
define variable x,y,z,x_0,y_0,y_1,z_0,z_1,z_2,w,w_0,u of type nat;

define axiom :- x * (y * z) = (x * y) * z;
define axiom :- x * 1 = x;

define predicate LNP by
  all X ( ex y X(y) impl ex y ( all z ( z < y impl not X(z)) and X(y)));
define predicate IND by
  all X ( all y ( all z ( z < y impl X(z) ) impl X(y) ) impl all y X(y) );

define predicate D by
  ex z w * z = y;

define predicate PRIME by
  w > 1 and all z ( D(z, w) impl ( z = 1 or z = w ) );

define predicate PD by
  PRIME(w) and D(w,y);

define proof LNP-IND
  proves LNP :- IND;

  with undef IND
    :- all X ( all y ( all z ( z < y impl X(z) ) impl X(y) ) impl all y X(y) );

  with all2 right
    :- all y ( all z ( z < y impl X_0(z) ) impl X_0(y) ) impl all y X_0(y);

  with undef LNP
    all X ( ex y X(y) impl ex y ( all z ( z < y impl not X(z)) and X(y))) :- ;

  with all2 left with lambda x . not X_0(x)
    ex y not X_0(y) impl ex y ( all z ( z < y impl not not X_0(z)) and not X_0(y)) :-;

  with impl right
    all y ( all z ( z < y impl X_0(z) ) impl X_0(y) ) :- all y X_0(y);

  with all right
    :- X_0(y_0);

  with impl left
    ex y ( all z ( z < y impl not not X_0(z)) and not X_0(y)) :- 
    left by proof LNP-IND-1;

  with ex left
    all z ( z < y_1 impl not not X_0(z)) and not X_0(y_1) :-;

  with all left
    all z ( z < y_1 impl X_0(z) ) impl X_0(y_1) :-;

  with and left
    all z ( z < y_1 impl not not X_0(z)), not X_0(y_1) :-;

  with not left
    :- X_0(y_1);

  with impl left
    :- all z ( z < y_1 impl X_0(z) )
    right explicit axiom X_0(y_1) :- X_0(y_1);

  with all right
    :- z_0 < y_1 impl X_0(z_0);

  with all left
    z_0 < y_1 impl not not X_0(z_0) :-;

  continued auto propositional
    z_0 < y_1 impl not not X_0(z_0) :- z_0 < y_1 impl X_0(z_0);
;

define proof LNP-IND-1
  proves :- ex y not X_0(y), X_0(y_0);

  with ex right
    :- not X_0(y_0);

  continued auto propositional
    :- not X_0(y_0), X_0(y_0);
;

define proof the-proof
  proves LNP :- all y ex w ( y > 1 impl PD(w,y) );

  with cut IND
    left by proof LNP-IND;

  with undef IND 
    all X ( all y ( all z ( z < y impl X(z) ) impl X(y) ) impl all y X(y) ) :-;

  with all2 left with lambda u . ex w ( u > 1 impl PD(w,u) )
    all y ( all z ( z < y impl ex w ( z > 1 impl PD(w,z) ) ) impl ex w ( y > 1 impl PD(w, y) ) ) 
    impl all y ex w ( y > 1 impl PD(w,y) ) :-;

  with impl left
    :- all y ( all z ( z < y impl ex w ( z > 1 impl PD(w,z) ) ) impl ex w ( y > 1 impl PD(w, y) ) )
    right auto propositional all y ex w ( y > 1 impl PD(w,y) ) :- all y ex w ( y > 1 impl PD(w,y) );

  with all right
    :- all z ( z < y_0 impl ex w ( z > 1 impl PD(w,z) ) ) impl ex w ( y_0 > 1 impl PD(w, y_0) );

  with impl right
    all z ( z < y_0 impl ex w ( z > 1 impl PD(w,z) ) ) :- ex w ( y_0 > 1 impl PD(w, y_0) );

  with cut not y_0 > 1
    left by proof I
    right by proof II;
;

define proof I
  proves all z ( z < y_0 impl ex w ( z > 1 impl PD(w,z) ) ) :- ex w ( y_0 > 1 impl PD(w, y_0) ), not y_0 > 1;

  with not right
    y_0 > 1 :-;

  with cut not PRIME(y_0)
    left by proof I_a
    right by proof I_b;
;

define proof I_a
  proves y_0 > 1, all z ( z < y_0 impl ex w ( z > 1 impl PD(w,z) ) ) :- 
    ex w ( y_0 > 1 impl PD(w, y_0) ), not PRIME(y_0);

  with not right
    PRIME(y_0) :-;

  with ex right
    :- y_0 > 1 impl PD(y_0, y_0);

  with impl right
    :- PD(y_0, y_0);

  with undef PD
    :- PRIME(y_0) and D(y_0, y_0);

  with and right
    :- D(y_0, y_0)
    left auto propositional PRIME(y_0) :- PRIME(y_0);

  with undef D
    :- ex z y_0 * z = y_0;

  with ex right
    :- y_0 * 1 = y_0;
;

define proof I_b
  proves not PRIME(y_0), y_0 > 1, all z ( z < y_0 impl ex w ( z > 1 impl PD(w,z) ) ) :- 
    ex w ( y_0 > 1 impl PD(w, y_0) );

  with not left
    :- PRIME(y_0);

  with undef PRIME
    :- y_0 > 1 and all z ( D(z, y_0) impl ( z = 1 or z = y_0 ) );

  with and right
    left by proof I_{b1}
    right by proof I_{b2};
;

define proof I_{b1}
  proves :- ex w ( y_0 > 1 impl PD(w, y_0) ), y_0 > 1;

  with ex right
    :- y_0 > 1 impl PD(y_0, y_0);

  continued auto propositional :- y_0 > 1 impl PD(y_0, y_0), y_0 > 1;
;

define proof I_{b2}
  proves y_0 > 1, all z ( z < y_0 impl ex w ( z > 1 impl PD(w,z) ) ) 
    :- all z ( D(z, y_0) impl ( z = 1 or z = y_0 ) ), ex w ( y_0 > 1 impl PD(w, y_0) );

  with all right
    :- D(z_0, y_0) impl ( z_0 = 1 or z_0 = y_0 );

  with impl right
    D(z_0, y_0) :- z_0 = 1 or z_0 = y_0 ;

  with or right
    :- z_0 = 1, z_0 = y_0 ;

  with all left
    z_0 < y_0 impl ex w ( z_0 > 1 impl PD(w,z_0) ) :-;

  with impl left
    ex w ( z_0 > 1 impl PD(w,z_0) ) :-
    left by proof I_{b22};

  with ex left
    z_0 > 1 impl PD(w_0,z_0) :-;

  with ex right
    :- y_0 > 1 impl PD(w_0, y_0) ;

  with impl left
    PD(w_0,z_0) :-
    left by proof I_{b222};

  with impl right
    y_0 > 1 :- PD(w_0, y_0) ;

  with undef PD
    PRIME(w_0) and D(w_0,z_0) :- PRIME(w_0) and D(w_0,y_0) ;

  with and left
    PRIME(w_0), D(w_0,z_0) :-;

  with and right
    :- D(w_0,y_0)
    left auto propositional PRIME(w_0) :- PRIME(w_0);

  with undef D
    ex z w_0 * z = z_0, ex z z_0 * z = y_0 :- ex z w_0 * z = y_0;

  with ex left
    w_0 * z_1 = z_0, z_0 * z_2 = y_0 :-;

  with ex right
    :- w_0 * ( z_1 * z_2 ) = y_0 ;

  with paramod by w_0 * ( z_1 * z_2 ) = ( w_0 * z_1 ) * z_2
    right :- ( w_0 * z_1 ) * z_2 = y_0 ;

  with paramod by w_0 * z_1 = z_0
    right :- z_0 * z_2 = y_0 ;
;

define proof I_{b22}
  proves y_0 > 1, D(z_0, y_0) :- z_0 = 1, z_0 = y_0, z_0 < y_0;

  with undef D
    ex z z_0 * z = y_0 :-;

  with ex left
    z_0 * z_1 = y_0 :- ;

  explicit axiom y_0 > 1, z_0 * z_1 = y_0 :- z_0 = 1, z_0 = y_0, z_0 < y_0;
;

define proof I_{b222}
  proves D(z_0, y_0), y_0 > 1 :- z_0 = 1, z_0 > 1;

  with undef D
    ex z z_0 * z = y_0 :-;

  with ex left
    z_0 * z_1 = y_0 :-;
 
  explicit axiom z_0 * z_1 = y_0, y_0 > 1 :- z_0 = 1, z_0 > 1;
;

define proof II
  proves not y_0 > 1 :- ex w ( y_0 > 1 impl PD(w, y_0) );

  with ex right
    :- y_0 > 1 impl PD(y_0, y_0);

  continued auto propositional not y_0 > 1 :- y_0 > 1 impl PD(y_0, y_0);
;
